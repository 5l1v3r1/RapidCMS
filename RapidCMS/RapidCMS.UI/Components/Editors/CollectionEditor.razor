@inherits BaseRelationEditor

@if (Ids != null)
{
    var index = 0;
    var group = Guid.NewGuid().ToString();

    <div class="nested-content">
        <Collection Action=@Constants.Edit
                    CollectionAlias=@RelationDataCollection.CollectionAlias
                    ParentId=@EditContext.Entity.Id
                    EntityIds=@Ids />
    </div>

    @*<div class="form-control form-control-select-list @(CssHelper.GetValidationClass(State))">
            @foreach (var option in Options)
            {
                index++;

                var check = SelectedOptions.Any(x => x.Id.Equals(option.Id));

                <div class="form-check">
                    <div class="row">
                        <div class="col">
                            <label class="form-check-label" for="@group-option@(index)">
                                <input class="form-check-input"
                                       type="checkbox"
                                       value=@option.Id
                                       id="@group-option@(index)"
                                       name=@group
                                       checked=@check
                                       @onchange=@((UIChangeEventArgs __e) => OnChangeAsync(__e, option.Id)) />

                                @option.Labels.First()
                            </label>
                        </div>
                        @foreach (var label in option.Labels.Skip(1))
                        {
                            <div class="col">
                                <label class="form-check-label" for="@group-option@(index)">
                                    @label
                                </label>
                            </div>
                        }
                    </div>
                </div>
            }

        </div>

        @foreach (var message in GetValidationMessages())
        {
            <div class="invalid-feedback">
                @message
            </div>
        }*@
}
@functions {

    private IEnumerable<string>? Ids;

    protected override async Task OnParametersSetAsync()
    {
        if (RelationDataCollection != null)
        {
            await RelationDataCollection.SetRelationMetadataAsync(Entity, Property);

            Ids = await RelationDataCollection.GetRelatedIdsAsync();
        }
    }

    //private async Task OnChangeAsync(UIChangeEventArgs e, object value)
    //{
    //    var element = Options.First(x => x.Id.Equals(value));

    //    if ((bool)e.Value == true)
    //    {
    //        await RelationDataCollection!.AddElementAsync(element);
    //    }
    //    else
    //    {
    //        await RelationDataCollection!.RemoveElementAsync(element);
    //    }

    //    EditContext.NotifyPropertyChanged(Property);
    //}
}