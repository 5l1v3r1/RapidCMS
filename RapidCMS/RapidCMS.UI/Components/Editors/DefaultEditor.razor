@*
    // TODO: this should be made more nicer
    // TODO: this limits extensibility from outside
    // perhaps try https://docs.microsoft.com/en-us/aspnet/core/razor-components/components?view=aspnetcore-3.0#child-content

    // TODO: remove binding callback

    // TODO: change editor to accept complete Field / Property, instead of seperate parts
    // this wil make it a lot more dynamic
*@
@using RapidCMS.Common.Enums
@using RapidCMS.Common.Interfaces

@if (Type.HasValue)
{
    if (IsReadonly)
    {
        <Readonly Value="@LocalValue" />
    }
    else
    {
        switch (Type)
        {
            case EditorType.Readonly:

                <Readonly Value="@LocalValue" />

                break;

            case EditorType.Numeric:

                <NumericEditor Value="@LocalValue" Callback="ChildEditorCallback" />

                break;

            case EditorType.TextArea:

                <TextAreaEditor Value="@LocalValue" Callback="ChildEditorCallback" />

                break;

            case EditorType.Select:

                <SelectEditor Value="@LocalValue" Callback="ChildEditorCallback" DataProvider="DataProvider" />

                break;

            case EditorType.TextBox:
            default:

                <TextBoxEditor Value="@LocalValue" Callback="ChildEditorCallback" />

                break;
        }
    }
}

@functions {

#nullable enable

    [Parameter]
    private string Value { get; set; }

    public string LocalValue
    {
        get
        {
            return Value;
        }
        set
        {
            Value = value;
        }
    }

    [Parameter]
    private EditorType? Type { get; set; } = null;

    [Parameter]
    private bool IsReadonly { get; set; }

    [Parameter]
    private Action<string> Callback { get; set; }

    [Parameter]
    private IDataProvider? DataProvider { get; set; }

    private void ChildEditorCallback(string value)
    {
        LocalValue = value;

        Callback.Invoke(value);
    }
}