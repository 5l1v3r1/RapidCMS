@using RapidCMS.Common.Enums
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Data
@using RapidCMS.UI.Models

@if (Field != null && Entity != null)
{
    try
    {
        switch (Field.Type)
        {
            case EditorType.Custom:

                @CustomEditors.GetCustomEditor(CustomField.CustomAlias, Entity, CustomField.Property, CustomField.ValueMapper, CustomField.DataCollection)

                break;

            case EditorType.Readonly:

                <Readonly Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper />

                break;

            case EditorType.Numeric:

                <NumericEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper />

                break;

            case EditorType.Checkbox:

                <CheckboxEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper />

                break;

            case EditorType.TextArea:

                <TextAreaEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper />

                break;

            case EditorType.TextBox:
            default:

                <TextBoxEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper />

                break;

            case EditorType.Select:

                <SelectEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper DataCollection=@PropertyField.DataCollection />

                break;

            case EditorType.MultiSelect:

                <MultiSelectEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper DataCollection=@PropertyField.DataCollection />

                break;

            case EditorType.Dropdown:

                <DropdownEditor Entity=@Entity Property=@PropertyField.Property ValueMapper=@PropertyField.ValueMapper DataCollection=@PropertyField.DataCollection />

                break;
        }
    }
    catch (Exception ex)
    {
        throw new InvalidOperationException("Failed to cast Field into required Type", ex);
    }
}

@functions {

#nullable enable

    [CascadingParameter(Name = "CustomEditors")]
    protected CustomEditorContainer CustomEditors { get; set; }

    [Parameter]
    private FieldUI? Field { get; set; }

    private CustomPropertyFieldUI CustomField => (CustomPropertyFieldUI)Field;
    private PropertyFieldUI PropertyField => (PropertyFieldUI)Field;

    [Parameter]
    private IEntity? Entity { get; set; }

    protected override void OnInit()
    {
        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }
}