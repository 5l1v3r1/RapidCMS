@*
    // TODO: this should be made more nicer
    // TODO: this limits extensibility from outside
    // perhaps try https://docs.microsoft.com/en-us/aspnet/core/razor-components/components?view=aspnetcore-3.0#child-content

    // TODO: remove binding callback

    // TODO: change editor to accept complete Field / Property, instead of seperate parts
    // this wil make it a lot more dynamic
*@
@using RapidCMS.Common.Enums
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Data
@using RapidCMS.UI.Models

@if (Field != null && Entity != null)
{
    switch (Field.Type)
    {
        case EditorType.Custom:

            @CustomEditors.GetCustomEditor(Field.CustomAlias, LocalValue, ChildEditorCallback)

            break;

        case EditorType.Readonly:

            <Readonly EditorValue="@Field.GetReadonlyValue(Entity)" />

            break;

        case EditorType.Numeric:

            <NumericEditor EditorValue="@((long)LocalValue)" Callback="ChildEditorCallback" />

            break;

        case EditorType.TextArea:

            <TextAreaEditor EditorValue="@((string)LocalValue)" Callback="ChildEditorCallback" />

            break;

        case EditorType.TextBox:
        default:

            <TextBoxEditor EditorValue="@((string)LocalValue)" Callback="ChildEditorCallback" />

            break;

        case EditorType.Select:

            <SelectEditor EditorValue="@((string)LocalValue)" Callback="ChildEditorCallback" DataProvider="Field.DataProvider" />

            break;

        case EditorType.MultiSelect:

            <MultiSelectEditor EditorValue="@((ICollection<string>)LocalValue)" Callback="ChildEditorCallback" DataProvider="Field.DataProvider" />

            break;

        case EditorType.Dropdown:

            <DropdownEditor EditorValue="@((string)LocalValue)" Callback="ChildEditorCallback" DataProvider="Field.DataProvider" />

            break;
    }
}

@functions {

#nullable enable

    [CascadingParameter(Name = "CustomEditors")]
    protected CustomEditorContainer CustomEditors { get; set; }

    [Parameter]
    private FieldUI? Field { get; set; }

    [Parameter]
    private IEntity? Entity { get; set; }

    public object? LocalValue
    {
        get
        {
            return Entity == null ? null : Field?.GetValue(Entity);
        }
        set
        {
            if (Field != null && Entity != null)
            {
                Field.SetValue(Entity, value);
            }
        }
    }

    private void ChildEditorCallback<T>(T value)
    {
        LocalValue = (object?)value;
    }
}