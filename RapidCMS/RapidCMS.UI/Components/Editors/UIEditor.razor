@using RapidCMS.Common.Enums
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Data
@using RapidCMS.UI.Models

@if (Field != null && Entity != null)
{
    switch (Field.Type)
    {
        case EditorType.Custom:

            @CustomEditors.GetCustomEditor(Field.CustomAlias, Entity, Field.Property, Field.ValueMapper, Field.DataCollection)

            break;

        case EditorType.Readonly:

            <Readonly Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper />

            break;

        case EditorType.Numeric:

            <NumericEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper />

            break;

        case EditorType.Checkbox:

            <CheckboxEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper />

            break;

        case EditorType.TextArea:

            <TextAreaEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper />

            break;

        case EditorType.TextBox:
        default:

            <TextBoxEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper />

            break;

        case EditorType.Select:

            <SelectEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper DataCollection=@Field.DataCollection />

            break;

        case EditorType.MultiSelect:

            <MultiSelectEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper DataCollection=@Field.DataCollection />

            break;

        case EditorType.Dropdown:

            <DropdownEditor Entity=@Entity Property=@Field.Property ValueMapper=@Field.ValueMapper DataCollection=@Field.DataCollection />

            break;
    }
}

@functions {

#nullable enable

    [CascadingParameter(Name = "CustomEditors")]
    protected CustomEditorContainer CustomEditors { get; set; }

    [Parameter]
    private FieldUI? Field { get; set; }

    [Parameter]
    private IEntity? Entity { get; set; }

    protected override void OnInit()
    {
        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }
}