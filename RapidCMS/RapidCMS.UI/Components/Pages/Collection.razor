@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId}"

@using RapidCMS.Common
@using RapidCMS.Common.Enums
@using RapidCMS.UI.Components.Buttons
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Extensions
@using RapidCMS.Common.Interfaces
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else
{
    if (UI.ListType.In(ListType.TableView, ListType.TableEditor))
    {
        <div class="top-row px-4">
            @foreach (var button in UI.Buttons)
            {

                // TODO: put in helper function
                var context = new ButtonContext<BasePage>
                {
                    ButtonId = button.ButtonId,
                    CallbackAsync = ButtonCallbackAsync,
                    Context = this,
                    Icon = button.Icon,
                    Label = button.Label,
                    ShouldConfirm = button.ShouldConfirm,
                    IsPrimary = button.IsPrimary
                };

                <CascadingValue Value="context">
                    @if (!string.IsNullOrEmpty(button.Alias))
                    {
                        @CustomButtons[button.Alias]
                    }
                    else
                    {
                        <DefaultButton TContext="BasePage" />
                    }
                </CascadingValue>
            }
        </div>

        var pane = UI.Section;

        var hasButtons = pane.Buttons?.Any() ?? false;

        <div class="content px-4">
            <table class="table">
                <thead>
                    <tr>
                        @foreach (var element in pane.Elements)
                        {
                            if (element is FieldWithLabelUI field)
                            {
                                <td>@field.Name<br /><small>@field.Description</small></td>
                            }
                        }
                        @if (hasButtons)
                        {
                            <td></td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var entity in UI.Entities)
                    {
                        <tr>
                            @foreach (var element in pane.Elements)
                            {
                                if (element is FieldWithLabelUI field)
                                {
                                    if (UI.ListType == ListType.TableView)
                                    {
                                        <td>@field.GetReadonlyValue(entity)</td>
                                    }
                                    else
                                    {
                                        <td>
                                            <DefaultEditor Field="field" Entity="@entity" />
                                        </td>
                                    }
                                }
                            }
                            @if (hasButtons)
                            {
                                <td>
                                    @foreach (var button in pane.Buttons)
                                    {

                                        // TODO: put in helper function
                                        var context = new ButtonContext<IEntity>
                                        {
                                            ButtonId = button.ButtonId,
                                            CallbackAsync = NodeButtonCallbackAsync,
                                            Context = entity,
                                            Icon = button.Icon,
                                            Label = button.Label,
                                            ShouldConfirm = button.ShouldConfirm,
                                            IsPrimary = button.IsPrimary
                                        };

                                        <CascadingValue Value="context">
                                            @if (!string.IsNullOrEmpty(button.Alias))
                                            {
                                                @CustomButtons[button.Alias]
                                            }
                                            else
                                            {
                                                <DefaultButton TContext="IEntity" />
                                            }
                                        </CascadingValue>
                                    }
                                </td>
                            }

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
@*else if (EditorView != null)
    {
        <div class="top-row px-4">
            @foreach (var button in EditorView.Buttons)
            {
                var context = new ButtonContext<BasePage>
                {
                    ButtonId = button.ButtonId,
                    CallbackAsync = EditorButtonCallbackAsync,
                    Context = this,
                    Icon = button.Icon,
                    Label = button.Label,
                    ShouldConfirm = button.ShouldConfirm
                };

                <CascadingValue Value="context">
                    @if (!string.IsNullOrEmpty(button.Alias))
                    {
                        @CustomButtons[button.Alias]
                    }
                    else
                    {
                        <DefaultButton TContext="BasePage" />
                    }
                </CascadingValue>
            }
        </div>

        var pane = EditorView.Editor;

        if (EditorView.ListEditorType == ListEditorType.Table)
        {
            var aliasToIndex = pane.Properties.Select((property, index) => (property.Alias, index)).ToDictionary(x => x.Alias, x => x.index);

            <div class="content px-4">
                <table class="table">
                    <thead>
                        <tr>
                            @foreach (var header in pane.Properties)
                            {
                                <td>@header.Name<br /><small>@header.Description</small></td>
                            }
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var node in pane.Nodes)
                        {
                            var currentIndex = -1;

                            <tr>
                                @foreach (var value in node.Values)
                                {
                                    var thisIndex = aliasToIndex[value.Alias];

                                    while (++currentIndex < thisIndex)
                                    {
                                        <td>&nbsp;</td>
                                    }

                                    <td>
                                        @*<DefaultEditor Type="@value.Type"
                                                       Value="@value.Value"
                                                       Callback="@((string newValue) => value.Value = newValue)"
                                                       IsReadonly="@value.IsReadonly" />* @
                                    </td>
                                }

                                @while (++currentIndex < aliasToIndex.Count)
                                {
                                    <td>&nbsp;</td>
                                }
                                <td>
                                    @foreach (var button in node.Buttons)
                                    {
                                        var context = new ButtonContext<NodeDTO>
                                        {
                                            ButtonId = button.ButtonId,
                                            CallbackAsync = NodeEditorButtonCallbackAsync,
                                            Context = node,
                                            Icon = button.Icon,
                                            Label = button.Label,
                                            ShouldConfirm = button.ShouldConfirm
                                        };

                                        <CascadingValue Value="context">
                                            @if (!string.IsNullOrEmpty(button.Alias))
                                            {
                                                @CustomButtons[button.Alias]
                                            }
                                            else
                                            {
                                                <DefaultButton TContext="NodeDTO" />
                                            }
                                        </CascadingValue>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        @*else if (EditorView.ListEditorType == ListEditorType.Block)
        {
            @foreach (var node in pane.Nodes)
            {
                <div class="content px-4">
                    <div class="top-row px-4">
                        @foreach (var button in node.Buttons)
                        {
                            var context = new ButtonContext<NodeDTO>
                            {
                                ButtonId = button.ButtonId,
                                CallbackAsync = NodeEditorButtonCallbackAsync,
                                Context = node,
                                Icon = button.Icon,
                                Label = button.Label,
                                ShouldConfirm = button.ShouldConfirm
                            };

                            <CascadingValue Value="context">
                                @if (!string.IsNullOrEmpty(button.Alias))
                                {
                                    @CustomButtons[button.Alias]
                                }
                                else
                                {
                                    <DefaultButton TContext="NodeDTO" />
                                }
                            </CascadingValue>
                        }
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <td>Field</td>
                                <td>Editor</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var value in node.Values)
                            {
                                var property = pane.Properties.First(x => x.Alias == value.Alias);

                                <tr>
                                    <td>
                                        @property.Name<br /><small>@property.Description</small>
                                    </td>
                                    <td>
                                        <DefaultEditor Type="@value.Type"
                                                       Value="@value.Value"
                                                       Callback="@((string newValue) => value.Value = newValue)"
                                                       IsReadonly="@value.IsReadonly" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            }
        }* @
    }*@

@functions {
#nullable enable

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter]
    private string? Id { get; set; } = null;

    ListUI? UI;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        UI = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, VariantAlias, ParentId);

        StateHasChanged();
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task NodeButtonCallbackAsync(string actionId, IEntity entity)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, entity.Id, actionId, entity);

        await HandleViewCommandAsync(command);
    }

    async Task NodeEditorButtonCallbackAsync(string actionId, NodeDTO node)
    {
        // TODO: fix null
        var command = await CollectionService.ProcessListEditorActionAsync(CollectionAlias, node.VariantAlias, node.ParentId, node.Id, null, actionId);

        await HandleViewCommandAsync(command);
    }
}
