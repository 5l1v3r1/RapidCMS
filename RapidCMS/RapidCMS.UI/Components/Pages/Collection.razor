@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId}"

@using RapidCMS.Common.Enums
@using RapidCMS.Common.Extensions
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services
@using RapidCMS.UI.Models

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <CascadingValue Name="EditContext" Value="UI.RootEditContext">
        @if (UI.Buttons != null)
        {
            <div class="top-row first">
                @foreach (var button in UI.Buttons)
                {
                    var model = CreateButtonViewModel(button);

                    // TODO: deattach
                    model.OnClick += ListButtonOnClickAsync;

                    <UIButton Button="button" Model="model" />
                }
            </div>
        }
    </CascadingValue>
    @if (UI.EditContexts.Any() && UI.SectionsForEntity != null)
    {
        @if (UI.ListType.In(ListType.TableView, ListType.TableEditor))
        {
            var elementsProcessed = new List<string>();

            <div class="content">
                <table class="table">
                    <thead>
                        <tr>
                            @{
                                var hasButtons = false;

                                foreach (var context in UI.EditContexts)
                                {
                                    if (UI.SectionsForEntity.TryGetValue(context.Entity.Id, out var sections))
                                    {
                                        foreach (var section in sections)
                                        {
                                            hasButtons = hasButtons || (section.Buttons?.Any() ?? false);

                                            if (section.Elements != null)
                                            {
                                                foreach (var element in section.Elements)
                                                {
                                                    if (element is FieldUI field)
                                                    {
                                                        var name = (field as ExpressionFieldUI)?.Expression.PropertyName ?? (field as PropertyFieldUI)?.Property.PropertyName;

                                                        if (name != null && !elementsProcessed.Contains(name))
                                                        {
                                                            elementsProcessed.Add(name);

                                                            <td>@field.Name<br /><small>@field.Description</small></td>
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (hasButtons)
                                {
                                    <td class="button-cell"></td>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var context in UI.EditContexts)
                        {
                            if (UI.SectionsForEntity.TryGetValue(context.Entity.Id, out var sections))
                            {
                                <CascadingValue Name="EditContext" Value="context">
                                    @foreach (var section in sections)
                                    {
                                        var index = 0;

                                        @if (section.Elements != null)
                                        {

                                            <tr>
                                                @{
                                                    foreach (var element in section.Elements)
                                                    {
                                                        if (element is FieldUI field)
                                                        {
                                                            var name = (field as ExpressionFieldUI)?.Expression.PropertyName ?? (field as PropertyFieldUI)?.Property.PropertyName;

                                                            if (name == null)
                                                            {
                                                                continue;
                                                            }

                                                            // fill in the gaps (when dealing with multiple entity variants)
                                                            // TODO: only do this when fill the gaps setting is active
                                                            while (elementsProcessed.IndexOf(name) > index++)
                                                            {
                                                                <td>&nbsp;</td>
                                                            }

                                                            if (field is ExpressionFieldUI expressionField)
                                                            {
                                                                <td>@expressionField.Expression.StringGetter(context.Entity)</td>
                                                            }
                                                            else if (field is PropertyFieldUI propertyField)
                                                            {
                                                                <td>
                                                                    <UIEditor Field="field" Entity="@context.Entity" />
                                                                </td>
                                                            }
                                                        }
                                                    }
                                                    // fill in the gaps (when dealing with multiple entity variants)
                                                    while (elementsProcessed.Count > index++)
                                                    {
                                                        <td>&nbsp;</td>
                                                    }
                                                    if (section.Buttons != null && section.Buttons.Any())
                                                    {
                                                        <td class="button-cell">
                                                            @foreach (var button in section.Buttons)
                                                            {
                                                                var model = CreateButtonViewModel(button);

                                                                // TODO: deattach
                                                                model.OnClick += NodeButtonOnClickAsync;

                                                                <UIButton Button="button" Model="model" />
                                                            }
                                                        </td>
                                                    }
                                                }

                                            </tr>
                                        }
                                    }
                                </CascadingValue>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (UI.ListType == ListType.BlockEditor)
        {
            @foreach (var context in UI.EditContexts)
            {
                <CascadingValue Name="EditContext" Value="context">
                    @if (UI.SectionsForEntity.TryGetValue(context.Entity.Id, out var sections))
                    {
                        foreach (var section in sections)
                        {
                            if (section.Buttons != null)
                            {
                                <div class="top-row">
                                    @foreach (var button in section.Buttons)
                                    {
                                        var model = CreateButtonViewModel(button);

                                        // TODO: deattach
                                        model.OnClick += NodeButtonOnClickAsync;

                                        <UIButton Button="button" Model="model" />
                                    }
                                </div>
                            }

                            if (!string.IsNullOrEmpty(section.CustomAlias))
                            {
                                @CustomSections.GetCustomSection(section.CustomAlias, section);
                            }
                            else
                            {
                                <BlockSection Section="section" />
                            }
                        }
                    }
                </CascadingValue>
            }
        }
    }
}
@functions {

    [Parameter] private string Action { get; set; }

    [Parameter] private string? ParentId { get; set; } = null;

    [Parameter] private string CollectionAlias { get; set; }

    [Parameter] private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter] private string? Id { get; set; } = null;

    ListUI? UI;

    protected override async Task LoadDataAsync()
    {
        try
        {
            UI = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, VariantAlias, ParentId);

            StateHasChanged();
        }
        catch
        {
            UI = null;

            throw;
        }
    }

    async void ListButtonOnClickAsync(object sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    async void NodeButtonOnClickAsync(object sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, args.EditContext.Entity.Id, args.EditContext, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}
