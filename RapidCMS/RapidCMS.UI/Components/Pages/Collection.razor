@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId}"

@using RapidCMS.Common.Enums
@using RapidCMS.Common.Extensions
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <div class="top-row first">
        @foreach (var button in UI.Buttons)
        {
            var context = CreateButtonContext<BasePage>(this, button, ButtonCallbackAsync);

            <UIButton TContext="BasePage" Button="button" Context="context" />
        }
    </div>

    if (UI.Entities.Any())
    {
        <div class="content">
            @if (UI.ListType.In(ListType.TableView, ListType.TableEditor))
            {
                var elementsProcessed = new List<string>();

                <table class="table">
                    <thead>
                        <tr>
                            @{
                                var hasButtons = false;

                                foreach (var subject in UI.Entities)
                                {
                                    var section = SubjectToSectionMap[subject.Entity.Id];
                                    hasButtons = hasButtons || (section.Buttons?.Any() ?? false);

                                    foreach (var element in section.Elements)
                                    {
                                        if (element is FieldUI field)
                                        {
                                            var name = (field as ExpressionFieldUI)?.Expression.PropertyName
                                                ?? (field as PropertyFieldUI)?.Property.PropertyName;

                                            if (!elementsProcessed.Contains(name))
                                            {
                                                elementsProcessed.Add(name);

                                                <td>@field.Name<br /><small>@field.Description</small></td>
                                            }
                                        }
                                    }
                                }

                                if (hasButtons)
                                {
                                    <td class="button-cell"></td>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subject in UI.Entities)
                        {
                            var section = SubjectToSectionMap[subject.Entity.Id];
                            var index = 0;

                            <tr>
                                @{
                                    foreach (var element in section.Elements)
                                    {
                                        if (element is FieldUI field)
                                        {
                                            var name = (field as ExpressionFieldUI)?.Expression.PropertyName
                                                ?? (field as PropertyFieldUI)?.Property.PropertyName;

                                            // fill in the gaps (when dealing with multiple entity variants)
                                            // TODO: only do this when fill the gaps setting is active
                                            while (elementsProcessed.IndexOf(name) > index++)
                                            {
                                                <td>&nbsp;</td>
                                            }

                                            if (field is ExpressionFieldUI expressionField)
                                            {
                                                <td>@expressionField.Expression.StringGetter(subject.Entity)</td>
                                            }
                                            else if (field is PropertyFieldUI propertyField)
                                            {
                                                <td>
                                                    <UIEditor Field="field" Entity="@subject.Entity" />
                                                </td>
                                            }
                                        }
                                    }
                                    // fill in the gaps (when dealing with multiple entity variants)
                                    while (elementsProcessed.Count > index++)
                                    {
                                        <td>&nbsp;</td>
                                    }
                                    if (section.Buttons?.Any() ?? false)
                                    {
                                        <td class="button-cell">
                                            @foreach (var button in section.Buttons)
                                            {
                                                // TODO: WEIRD
                                                var node = new NodeUI
                                                {
                                                    Sections = new List<SectionUI>
                                                                        {
                                                        section
                                                    },
                                                    Subject = subject
                                                };

                                                var context = CreateButtonContext(node, button, NodeButtonCallbackAsync);

                                                <UIButton TContext="NodeUI" Button="button" Context="context" />
                                            }
                                        </td>
                                    }
                                }

                            </tr>
                        }
                    </tbody>
                </table>
            }
            else if (UI.ListType == ListType.BlockEditor)
            {
                @foreach (var subject in UI.Entities)
                {
                    var section = SubjectToSectionMap[subject.Entity.Id];

                    <div class="top-row">
                        @foreach (var button in section.Buttons)
                        {
                            // TODO: WEIRD
                            var node = new NodeUI
                            {
                                Sections = new List<SectionUI>
                            {
                                    section
                                },
                                Subject = subject
                            };

                            var context = CreateButtonContext(node, button, NodeButtonCallbackAsync);

                            <UIButton TContext="NodeUI" Button="button" Context="context" />
                        }
                    </div>

                    if (!string.IsNullOrEmpty(section.CustomAlias))
                    {
                        @CustomSections.GetCustomSection(section.CustomAlias, section, subject);
                    }
                    else
                    {
                        <BlockSection Section="section" Subject="subject" />
                    }
                }
            }
        </div>
    }
}
@functions {

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter]
    private string? Id { get; set; } = null;

    ListUI? UI;
    Dictionary<string, SectionUI> SubjectToSectionMap;

    protected override async Task LoadDataAsync()
    {
        try
        {
            var newUI = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, VariantAlias, ParentId);
            var newSubjectToSectionMap = new Dictionary<string, SectionUI>();

            // TODO: find better and nicer solution
            // pulling all the entities through the UI since this is the only place where async works..
            // TODO: triggers exception during save of new entity in list editor
            if (newUI != null)
            {

                foreach (var subject in newUI.Entities)
                {
                    newSubjectToSectionMap.Add(subject.Entity.Id, await newUI.SectionForEntityAsync(subject));
                }
            }

            UI = newUI;
            SubjectToSectionMap = newSubjectToSectionMap;

            StateHasChanged();
        }
        catch
        {
            UI = null;

            throw;
        }
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view, object? customData)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, actionId, customData);

        await HandleViewCommandAsync(command);
    }

    async Task NodeButtonCallbackAsync(string actionId, NodeUI node, object? customData)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, node.Subject.Entity.Id, actionId, node, customData);

        await HandleViewCommandAsync(command);
    }
}
