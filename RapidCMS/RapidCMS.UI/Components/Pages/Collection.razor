@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId}"

@using RapidCMS.Common
@using RapidCMS.Common.Enums
@using RapidCMS.UI.Components.Buttons
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService
@* TODO: merge both views into single one *@

<h1>Collection view of @CollectionAlias</h1>

@if (ListView == null && EditorView == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else if (ListView != null)
{
    <div class="top-row px-4">
        @foreach (var button in ListView.Buttons)
        {
            var context = new ButtonContext<BasePage>
            {
                ButtonId = button.ButtonId,
                CallbackAsync = ViewButtonCallbackAsync,
                Context = this,
                Icon = button.Icon,
                Label = button.Label,
                ShouldConfirm = button.ShouldConfirm
            };

            <CascadingValue Value="context">
                @if (!string.IsNullOrEmpty(button.Alias))
                {
                    @CustomButtons[button.Alias]
                }
                else
                {
                    <DefaultButton TContext="BasePage" />
                }
            </CascadingValue>
        }
    </div>

    // TODO: Add support for polymorphism and gaps in rows..

    @foreach (var pane in ListView.ViewPanes)
    {
        var hasButtons = pane.Buttons?.Any() ?? false;

        <div class="content px-4">
            <table class="table">
                <thead>
                    <tr>
                        @foreach (var header in pane.Properties)
                        {
                            <td>@header.Name<br /><small>@header.Description</small></td>
                        }
                        @if (hasButtons)
                        {
                            <td></td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var node in pane.Nodes)
                    {
                        <tr>
                            @foreach (var col in node.Values)
                            {
                                <td>@col.DisplayValue</td>
                            }
                            @if (hasButtons)
                            {
                                <td>
                                    @foreach (var button in pane.Buttons)
                                    {
                                        var context = new ButtonContext<NodeDTO>
                                        {
                                            ButtonId = button.ButtonId,
                                            CallbackAsync = NodeViewButtonCallbackAsync,
                                            Context = node,
                                            Icon = button.Icon,
                                            Label = button.Label,
                                            ShouldConfirm = button.ShouldConfirm
                                        };

                                        <CascadingValue Value="context">
                                            @if (!string.IsNullOrEmpty(button.Alias))
                                            {
                                                @CustomButtons[button.Alias]
                                            }
                                            else
                                            {
                                                <DefaultButton TContext="NodeDTO" />
                                            }
                                        </CascadingValue>
                                    }
                                </td>
                            }

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
else if (EditorView != null)
{
    <div class="top-row px-4">
        @foreach (var button in EditorView.Buttons)
        {
            var context = new ButtonContext<BasePage>
            {
                ButtonId = button.ButtonId,
                CallbackAsync = EditorButtonCallbackAsync,
                Context = this,
                Icon = button.Icon,
                Label = button.Label,
                ShouldConfirm = button.ShouldConfirm
            };

            <CascadingValue Value="context">
                @if (!string.IsNullOrEmpty(button.Alias))
                {
                    @CustomButtons[button.Alias]
                }
                else
                {
                    <DefaultButton TContext="BasePage" />
                }
            </CascadingValue>
        }
    </div>

    var pane = EditorView.Editor;

    if (EditorView.ListEditorType == ListEditorType.Table)
    {
        var aliasToIndex = pane.Properties.Select((property, index) => (property.Alias, index)).ToDictionary(x => x.Alias, x => x.index);

        <div class="content px-4">
            <table class="table">
                <thead>
                    <tr>
                        @foreach (var header in pane.Properties)
                        {
                            <td>@header.Name<br /><small>@header.Description</small></td>
                        }
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var node in pane.Nodes)
                    {
                        var currentIndex = -1;

                        <tr>
                            @foreach (var value in node.Values)
                            {
                                var thisIndex = aliasToIndex[value.Alias];

                                while (++currentIndex < thisIndex)
                                {
                                    <td>&nbsp;</td>
                                }

                                <td>
                                    <DefaultEditor Type="@value.Type"
                                                   Value="@value.Value"
                                                   Callback="@((string newValue) => value.Value = newValue)"
                                                   IsReadonly="@value.IsReadonly" />
                                </td>
                            }

                            @while (++currentIndex < aliasToIndex.Count)
                            {
                                <td>&nbsp;</td>
                            }
                            <td>
                                @foreach (var button in node.Buttons)
                                {
                                    var context = new ButtonContext<NodeDTO>
                                    {
                                        ButtonId = button.ButtonId,
                                        CallbackAsync = NodeEditorButtonCallbackAsync,
                                        Context = node,
                                        Icon = button.Icon,
                                        Label = button.Label,
                                        ShouldConfirm = button.ShouldConfirm
                                    };

                                    <CascadingValue Value="context">
                                        @if (!string.IsNullOrEmpty(button.Alias))
                                        {
                                            @CustomButtons[button.Alias]
                                        }
                                        else
                                        {
                                            <DefaultButton TContext="NodeDTO" />
                                        }
                                    </CascadingValue>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (EditorView.ListEditorType == ListEditorType.Block)
    {
        @foreach (var node in pane.Nodes)
        {
            <div class="content px-4">
                <div class="top-row px-4">
                    @foreach (var button in node.Buttons)
                    {
                        var context = new ButtonContext<NodeDTO>
                        {
                            ButtonId = button.ButtonId,
                            CallbackAsync = NodeEditorButtonCallbackAsync,
                            Context = node,
                            Icon = button.Icon,
                            Label = button.Label,
                            ShouldConfirm = button.ShouldConfirm
                        };

                        <CascadingValue Value="context">
                            @if (!string.IsNullOrEmpty(button.Alias))
                            {
                                @CustomButtons[button.Alias]
                            }
                            else
                            {
                                <DefaultButton TContext="NodeDTO" />
                            }
                        </CascadingValue>
                    }
                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <td>Field</td>
                            <td>Editor</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var value in node.Values)
                        {
                            var property = pane.Properties.First(x => x.Alias == value.Alias);

                            <tr>
                                <td>
                                    @property.Name<br /><small>@property.Description</small>
                                </td>
                                <td>
                                    <DefaultEditor Type="@value.Type"
                                                   Value="@value.Value"
                                                   Callback="@((string newValue) => value.Value = newValue)"
                                                   IsReadonly="@value.IsReadonly" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

        }
    }
}

@functions {
#nullable enable

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter]
    private string? Id { get; set; } = null;

    CollectionListViewDTO ListView;
    CollectionListEditorDTO EditorView;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        if (Action == Constants.List)
        {
            ListView = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, VariantAlias, ParentId);
            EditorView = null;
        }
        else
        {
            ListView = null;
            EditorView = await CollectionService.GetCollectionListEditorAsync(Action, CollectionAlias, VariantAlias, ParentId);
        }

        StateHasChanged();
    }

    async Task ViewButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessListViewActionAsync(CollectionAlias, ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task EditorButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessListEditorActionAsync(CollectionAlias, ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task NodeViewButtonCallbackAsync(string actionId, NodeDTO node)
    {
        var command = await CollectionService.ProcessListViewActionAsync(CollectionAlias, node.ParentId, node.Id, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task NodeEditorButtonCallbackAsync(string actionId, NodeDTO node)
    {
        var command = await CollectionService.ProcessListEditorActionAsync(CollectionAlias, node.VariantAlias, node.ParentId, node.Id, EditorView, actionId);

        await HandleViewCommandAsync(command);
    }
}
