@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId}"

@using RapidCMS.Common
@using RapidCMS.Common.Enums
@using RapidCMS.UI.Components.Buttons
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Extensions
@using RapidCMS.Common.Data
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else
{
    <div class="top-row px-4">
        @foreach (var button in UI.Buttons)
        {
            var context = CreateButtonContext<BasePage>(this, button, ButtonCallbackAsync);

            <UIButton TContext="BasePage" Button="button" Context="context" />
        }
    </div>

    <div class="content px-4">
        @if (UI.ListType.In(ListType.TableView, ListType.TableEditor))
        {
            var elementsProcessed = new List<string>();

            <table class="table">
                <thead>
                    <tr>
                        @{
                            var hasButtons = false;

                            foreach (var subject in UI.Entities)
                            {
                                var pane = UI.SectionForEntity(subject);
                                hasButtons = hasButtons || (pane.Buttons?.Any() ?? false);

                                foreach (var element in pane.Elements)
                                {
                                    if (element is FieldWithLabelUI field)
                                    {
                                        if (!elementsProcessed.Contains(field.Property.PropertyName))
                                        {
                                            elementsProcessed.Add(field.Property.PropertyName);

                                            <td>@field.Name<br /><small>@field.Description</small></td>
                                        }
                                    }
                                }
                            }

                            if (hasButtons)
                            {
                                <td></td>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subject in UI.Entities)
                    {
                        var pane = UI.SectionForEntity(subject);
                        var index = 0;

                        <tr>
                            @{
                                foreach (var element in pane.Elements)
                                {
                                    if (element is FieldWithLabelUI field)
                                    {
                                        // fill in the gaps (when dealing with multiple entity variants)
                                        // TODO: only do this when fill the gaps setting is active
                                        while (elementsProcessed.IndexOf(field.Property.PropertyName) > index++)
                                        {
                                            <td>&nbsp;</td>
                                        }

                                        if (UI.ListType == ListType.TableView)
                                        {
                                            <td>@field.GetReadonlyValue(subject.Entity)</td>
                                        }
                                        else
                                        {
                                            <td>
                                                <UIEditor Field="field" Entity="@subject.Entity" />
                                            </td>
                                        }
                                    }
                                }
                                // fill in the gaps (when dealing with multiple entity variants)
                                while (elementsProcessed.Count > index++)
                                {
                                    <td>&nbsp;</td>
                                }
                                if (pane.Buttons?.Any() ?? false)
                                {
                                    <td>
                                        @foreach (var button in pane.Buttons)
                                        {
                                            var context = CreateButtonContext(subject.Entity, button, NodeButtonCallbackAsync);

                                            <UIButton TContext="IEntity" Button="button" Context="context" />
                                        }
                                    </td>
                                }
                            }

                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (UI.ListType.In(ListType.BlockEditor))
        {
            @foreach (var subject in UI.Entities)
            {
                var pane = UI.SectionForEntity(subject);

                <div class="top-row px-4">
                    @foreach (var button in pane.Buttons)
                    {
                        var context = CreateButtonContext(subject.Entity, button, NodeButtonCallbackAsync);

                        <UIButton TContext="IEntity" Button="button" Context="context" />
                    }
                </div>

                <div class="content px-4">
                    <table class="table">
                        <thead>
                            <tr>
                                <td>Field</td>
                                <td>Editor</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var element in pane.Elements)
                            {
                                if (element is FieldWithLabelUI field)
                                {
                                    <tr>
                                        <td>
                                            @field.Name<br /><small>@field.Description</small>
                                        </td>
                                        <td>
                                            <UIEditor Field="field" Entity="@subject.Entity" />
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
}
@functions {
#nullable enable

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter]
    private string? Id { get; set; } = null;

    ListUI? UI;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        UI = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, VariantAlias, ParentId);

        StateHasChanged();
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view, object? customData)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, actionId, customData);

        await HandleViewCommandAsync(command);
    }

    async Task NodeButtonCallbackAsync(string actionId, IEntity entity, object? customData)
    {
        var command = await CollectionService.ProcessListActionAsync(Action, CollectionAlias, ParentId, entity.Id, actionId, entity, customData);

        await HandleViewCommandAsync(command);
    }
}
