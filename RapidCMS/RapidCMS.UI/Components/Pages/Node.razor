@inherits BasePage

@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}/{Id}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}/{Id}"

@using RapidCMS.Common
@using RapidCMS.UI.Components.Buttons
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services
@using RapidCMS.Common.Extensions

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else
{
    <div class="top-row px-4">
        @{
            @foreach (var button in UI.Buttons)
            {

                // TODO: put this in helper function
                var context = new ButtonContext<BasePage>
                {
                    ButtonId = button.ButtonId,
                    CallbackAsync = ButtonCallbackAsync,
                    Context = this,
                    Icon = button.Icon,
                    Label = button.Label,
                    ShouldConfirm = button.ShouldConfirm,
                    IsPrimary = button.IsPrimary
                };

                <CascadingValue Value="context">
                    @if (!string.IsNullOrEmpty(button.Alias))
                    {
                        @CustomButtons[button.Alias]
                    }
                    else
                    {
                        <DefaultButton TContext="BasePage" />
                    }
                </CascadingValue>
            }
        }
    </div>

    @foreach (var pane in UI.Sections)
    {
        @if (pane.Elements.Any())
        {
            @foreach (var elementGroup in pane.Elements.ChunckedGroupBy(x => x.GetType()))
            {
                if (elementGroup.Key == typeof(FieldWithLabelUI))
                {
                    <div class="content px-4">
                        @foreach (var field in elementGroup.Cast<FieldWithLabelUI>())
                        {
                            <div class="form-row">
                                <div class="col-2">
                                    <label>@field.Name</label>
                                    <small class="form-text text-muted">@field.Description</small>
                                </div>
                                <div class="col-10">
                                    @* // TODO: change to some enum on the EditorUI *@
                                    @if (Action == Constants.View)
                                    {
                                        @field.GetReadonlyValue(UI.Entity)
                                    }
                                    else
                                    {
                                        <DefaultEditor Field="field" Entity="@UI.Entity" />
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (elementGroup.Key == typeof(SubCollectionUI))
                {
                    @foreach (var subCollection in elementGroup.Cast<SubCollectionUI>())
                    {
                        <Collection Action="@Constants.Edit"
                                    CollectionAlias="@subCollection.CollectionAlias"
                                    ParentId="@Id" />
                    }
                }
            }
        }
    }
}

@functions {
#nullable enable

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Parameter]
    private string? Id { get; set; } = null;

    EditorUI? UI;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        UI = await CollectionService.GetNodeEditorAsync(Action, CollectionAlias, VariantAlias, ParentId, Id);
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view, object? customData)
    {
        var command = await CollectionService.ProcessNodeEditorActionAsync(CollectionAlias, VariantAlias, ParentId, Id, UI, actionId, customData);

        await HandleViewCommandAsync(command);
    }
}
