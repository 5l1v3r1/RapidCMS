@inherits BasePage

@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}/{Id}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}/{Id}"

@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <div class="top-row first">
        @{
            @foreach (var button in UI.Buttons)
            {
                var context = CreateButtonContext<BasePage>(this, button, ButtonCallbackAsync);

                <UIButton TContext="BasePage" Button="button" Context="context" />
            }
        }
    </div>

    @foreach (var section in UI.Sections)
    {
        if (!string.IsNullOrEmpty(section.CustomAlias))
        {
            @CustomSections.GetCustomSection(section.CustomAlias, section, UI.Subject);
        }
        else
        {
            <BlockSection Section="section" Subject="UI.Subject" />
        }
    }
}

@functions {
#nullable enable

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private string? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    [Parameter]
    private string VariantAlias { get; set; }

    [Parameter]
    private string? Id { get; set; } = null;

    NodeUI? UI;

    protected override async Task LoadDataAsync()
    {
        try
        {
            UI = await CollectionService.GetNodeEditorAsync(Action, CollectionAlias, VariantAlias, ParentId, Id);

            StateHasChanged();
        }
        catch
        {
            UI = null;

            throw;
        }
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view, object? customData)
    {
        try
        {
            var command = await CollectionService.ProcessNodeEditorActionAsync(CollectionAlias, VariantAlias, ParentId, Id, UI, actionId, customData);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}
