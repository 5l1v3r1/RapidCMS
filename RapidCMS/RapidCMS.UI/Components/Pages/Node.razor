@inherits BasePage

@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{CollectionAlias}/entity/{VariantAlias}/{Id}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}"
@page "/node/{Action}/{ParentId}/{CollectionAlias}/entity/{VariantAlias}/{Id}"

@using RapidCMS.Common.Extensions
@using RapidCMS.Common.Data
@using RapidCMS.Common.Models.UI
@using RapidCMS.Common.Services
@using RapidCMS.UI.Models

@inject ICollectionService CollectionService

@if (UI == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <CascadingValue Name="EditContext" Value="UI.EditContext">
        @if (UI.Buttons != null)
        {
            <div class="top-row first">
                @{
                    @foreach (var button in UI.Buttons)
                    {
                        var model = CreateButtonViewModel(button);

                        // TODO: deattach
                        model.OnClick += ButtonOnClickAsync;

                        <UIButton Button="button" Model="model" />
                    }
                }
            </div>
        }

        @if (UI.Sections != null)
        {
            @foreach (var section in UI.Sections)
            {
                if (!string.IsNullOrEmpty(section.CustomAlias))
                {
                    @CustomSections.GetCustomSection(section.CustomAlias, section);
                }
                else
                {
                    <BlockSection Section="section" />
                }
            }
        }
    </CascadingValue>
}

@functions {

    [Parameter] private string Action { get; set; }

    [Parameter] private string? ParentId { get; set; } = null;

    [Parameter] private string CollectionAlias { get; set; }

    [Parameter] private string VariantAlias { get; set; }

    [Parameter] private string? Id { get; set; } = null;

    NodeUI? UI;

    protected override async Task LoadDataAsync()
    {
        try
        {
            UI = await CollectionService.GetNodeEditorAsync(Action, CollectionAlias, VariantAlias, ParentId, Id);

            StateHasChanged();
        }
        catch
        {
            UI = null;

            throw;
        }
    }

    async void ButtonOnClickAsync(object sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            if (UI == null)
            {
                throw new InvalidOperationException("UI is null");
            }

            var relations = new RelationContainer(UI.Sections.SelectMany(x => x.GetRelations()));

            var command = await CollectionService.ProcessNodeEditorActionAsync(CollectionAlias, VariantAlias, ParentId, Id, args.EditContext, relations, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}
