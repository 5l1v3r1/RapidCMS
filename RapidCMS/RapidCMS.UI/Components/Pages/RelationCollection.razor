@inherits BasePage

@if (RootEditContext == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <Tabbar Tabs="Tabs" SearchBarVisible="UI.SearchBarVisible" OnSearch="SearchAsync" OnTabChange="TabChangeAsync" />
    <CascadingEditContext EditContext=@RootEditContext>

        @if (Buttons != null && Buttons.Any())
        {
            <div class="top-row first">
                @foreach (var button in Buttons)
                {
                    var model = button.ToViewModel();

                    model.OnClick += ListButtonOnClickAsync;

                    <UIButton Button="button" Model="model" />
                }
            </div>
        }
    </CascadingEditContext>

    @if (Sections != null && Sections.Any())
    {
        @if (UI.ListType.In(ListType.TableView, ListType.TableEditor))
        {
            var collapseEmptyCells = UI.EmptyVariantColumnVisibility == EmptyVariantColumnVisibility.Collapse;

            <div class="content">
                <table class="table">
                    <thead>
                        <tr>
                            @{
                                if (collapseEmptyCells && UI.CommonFields != null)
                                {
                                    foreach (var field in UI.CommonFields)
                                    {
                                        <td>@field.Name<br /><small>@field.Description</small></td>
                                    }

                                    if (UI.MaxUniqueFieldsInSingleEntity - UI.CommonFields.Count > 0)
                                    {
                                        <td colspan=@(UI.MaxUniqueFieldsInSingleEntity - UI.CommonFields.Count)></td>
                                    }
                                }
                                else if (UI.UniqueFields != null)
                                {
                                    foreach (var field in UI.UniqueFields)
                                    {
                                        <td>@field.Name<br /><small>@field.Description</small></td>
                                    }
                                }

                                if (UI.SectionsHaveButtons)
                                {
                                    <td class="button-cell"></td>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (context, sections) in Sections)
                        {
                            <CascadingEditContext EditContext=@context>
                                @foreach (var section in sections)
                                {
                                    if (!string.IsNullOrEmpty(section.CustomAlias))
                                    {
                                        @CustomSections.GetCustomSection(section.CustomAlias, section);
                                    }
                                    else
                                    {

                                        var index = 0;

                                        @if (section.Elements != null)
                                        {
                                            <tr>
                                                @{
                                                    foreach (var element in section.Elements)
                                                    {
                                                        if (element is FieldUI field)
                                                        {
                                                            var name = (field as ExpressionFieldUI)?.Expression.PropertyName ?? (field as PropertyFieldUI)?.Property.PropertyName;
                                                            if (name == null)
                                                            {
                                                                continue;
                                                            }

                                                            if (!collapseEmptyCells)
                                                            {
                                                                var position = UI.UniqueFields?.FindIndex(x => x.Name == field.Name) ?? UI.MaxUniqueFieldsInSingleEntity;

                                                                // fill in the gaps (when dealing with multiple entity variants)
                                                                if (position > index)
                                                                {
                                                                    <td colspan=@(position - index)>&nbsp;</td>

                                                                    index = position;
                                                                }
                                                            }

                                                            index++;

                                                            if (field is ExpressionFieldUI expressionField)
                                                            {
                                                                <td>@expressionField.Expression.StringGetter(context.Entity)</td>
                                                            }
                                                            else if (field is PropertyFieldUI propertyField)
                                                            {
                                                                <td>
                                                                    <UIEditor Field="field" Entity="@context.Entity" />
                                                                </td>
                                                            }
                                                        }
                                                    }
                                                    // fill in the gaps (when dealing with multiple entity variants)
                                                    if (!collapseEmptyCells && UI.UniqueFields?.Count > index)
                                                    {
                                                        <td colspan=@(UI.UniqueFields.Count - index)>&nbsp;</td>
                                                    }
                                                    if (UI.SectionsHaveButtons)
                                                    {
                                                        <td class="button-cell">
                                                            @if (section.Buttons != null && section.Buttons.Any())
                                                            {
                                                                @foreach (var button in section.Buttons)
                                                                {
                                                                    var model = button.ToViewModel();

                                                                    model.OnClick += NodeButtonOnClickAsync;

                                                                    <UIButton Button="button" Model="model" />
                                                                }
                                                            }
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                }
                            </CascadingEditContext>
                        }
                    </tbody>
                </table>

                <Paginator CurrentPage="@CurrentPage"
                           MaxPage="@MaxPage"
                           OnPageChanged="@PageChangedAsync" />
            </div>
        }
        else if (UI.ListType == ListType.BlockEditor)
        {
            @foreach (var (context, sections) in Sections)
            {
                <div class="content">
                    <div class="nested-content">
                        <CascadingEditContext EditContext=@context>

                            @foreach (var section in sections)
                            {
                                if (section.Buttons != null)
                                {
                                    <div class="top-row">
                                        @foreach (var button in section.Buttons)
                                        {
                                            var model = button.ToViewModel();

                                            model.OnClick += NodeButtonOnClickAsync;

                                            <UIButton Button="button" Model="model" />
                                        }
                                    </div>
                                }

                                if (!string.IsNullOrEmpty(section.CustomAlias))
                                {
                                    @CustomSections.GetCustomSection(section.CustomAlias, section);
                                }
                                else
                                {
                                    <BlockSection Section="section" />
                                }
                            }
                        </CascadingEditContext>
                    </div>
                </div>
            }

            <div class="content">
                <Paginator CurrentPage="@CurrentPage"
                           MaxPage="@MaxPage"
                           OnPageChanged="@PageChangedAsync" />
            </div>
        }
    }
    else
    {
        if (Action == Constants.Add)
        {
            <div class="content">
                <p>No furter elements are available.</p>
            </div>
        }
        else
        {
            <div class="content">
                <p>No related elements found.</p>
            </div>
        }
    }
}
@code {

    [Parameter] private IEntity RelatedEntity { get; set; }

    [Inject] private IEditContextService EditContextService { get; set; }
    [Inject] private IEditorService EditorService { get; set; }

    EditContext? RootEditContext;

    IEnumerable<ButtonUI>? Buttons;
    IEnumerable<(EditContext editContext, IEnumerable<SectionUI> sections)>? Sections;
    IEnumerable<TabUI>? Tabs;

    ListUI? UI;

    int? ActiveTab = null;
    string? SearchTerm = null;
    int CurrentPage = 1;
    int? MaxPage = null;

    UsageType previousUsage;

    protected override async Task LoadDataAsync(bool reload = false)
    {
        try
        {
            var rootEditContext = await EditContextService.GetRootAsync(GetUsageType(), CollectionAlias, ParentId);

            UI = await EditorService.GetListAsync(GetUsageType(), CollectionAlias);

            Buttons = await UI.GetButtonsForEditContextAsync(rootEditContext);
            Tabs = await UI.GetTabsAsync(rootEditContext);

            if (previousUsage != GetUsageType())
            {
                CurrentPage = 1;
                MaxPage = null;
                ActiveTab = null;
                SearchTerm = null;

                previousUsage = GetUsageType();
            }

            await LoadSectionsAsync();

            RootEditContext = rootEditContext;

            StateHasChanged();
        }
        catch
        {
            UI = null;

            throw;
        }
    }

    async void PageChangedAsync(int page)
    {
        CurrentPage = page;

        await LoadSectionsAsync();
    }

    async void SearchAsync(string? search)
    {
        CurrentPage = 1;

        SearchTerm = search;

        await LoadSectionsAsync();
    }

    async void TabChangeAsync(int? tabId)
    {
        ActiveTab = tabId;

        CurrentPage = 1;

        await LoadSectionsAsync();
    }

    async Task LoadSectionsAsync()
    {
        if (UI == null)
        {
            return;
        }

        var query = Query.Create(UI.PageSize, CurrentPage, SearchTerm, ActiveTab);

        var editContexts = await EditContextService.GetRelatedEntitiesAsync(GetUsageType(), CollectionAlias, RelatedEntity, query);
        Sections = await editContexts.ToListAsync(async editContext => (editContext, await UI.GetSectionsForEditContextAsync(editContext)));

        if (!query.MoreDataAvailable)
        {
            MaxPage = CurrentPage;

            if (CurrentPage > 1 && !Sections.Any())
            {
                CurrentPage--;
                await LoadSectionsAsync();
            }
        }
        if (MaxPage == CurrentPage && query.MoreDataAvailable)
        {
            MaxPage = null;
        }

        StateHasChanged();
    }

    async void ListButtonOnClickAsync(object sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            var command = await EditContextService.ProcessRelationActionAsync(GetUsageType(), CollectionAlias, RelatedEntity, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    async void NodeButtonOnClickAsync(object sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            if (UI == null)
            {
                throw new InvalidOperationException("UI is null");
            }

            var command = await EditContextService.ProcessRelationActionAsync(GetUsageType(), CollectionAlias, RelatedEntity, args.EditContext.Entity.Id, args.EditContext, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}