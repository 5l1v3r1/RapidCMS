@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Services
@using Microsoft.AspNetCore.Components.Services

@inject ICollectionService CollectionService
@inject IUriHelper UriHelper

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">TestClient</a>
    <button class="navbar-toggler" onclick="@ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" onclick="@ToggleNavMenu">
    <ul class="nav flex-column">
        @if (RootEntity != null)
        {
            @foreach (var collection in RootEntity.Collections)
            {
                <CollectionTreeView Collection="@collection" CurrentUrl="@currentUrl" />
            }
        }
    </ul>
</div>

@functions {
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    CollectionTreeRootDTO RootEntity;
    string currentUrl;

    protected override async Task OnInitAsync()
    {
        UriHelper.OnLocationChanged += LocationChanged;

        await GetCollectionsAsync();
    }

    private async Task GetCollectionsAsync()
    {
        RootEntity = await CollectionService.GetCollectionsAsync();
    }

    private async void LocationChanged(object sender, string e)
    {
        var uri = new Uri(e);

        currentUrl = uri.AbsolutePath?.Substring(1);

        if (!FindUrl(RootEntity.Collections, currentUrl))
        {
            await GetCollectionsAsync();
        }

        StateHasChanged();
    }

    private bool FindUrl(IEnumerable<CollectionTreeCollectionDTO> collections, string url)
    {
        if (!(collections?.Any() ?? false))
        {
            return false;
        }
        else if (collections.Any(x => x.Path.Any(x => x.Path == url)))
        {
            return true;
        }
        else if (collections.Where(x => x.Nodes != null).SelectMany(x => x.Nodes).Any(x => x.Path == url))
        {
            return true;
        }
        else
        {
            return FindUrl(collections.Where(x => x.Nodes != null).SelectMany(x => x.Nodes.SelectMany(y => y.Collections)), url);
        }
    }
}
