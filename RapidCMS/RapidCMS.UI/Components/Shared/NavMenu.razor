@inject ITreeService TreeService
@inject IUriHelper UriHelper

<div class="top-row navbar navbar-dark">
    @if (TreeRoot != null)
    {
        <a class="navbar-brand" href="">@TreeRoot.Name</a>
    }

    @if  (CustomLogin != null)
    {
        @CustomLogin
    }
</div>

<div class="navroot">
    <ul class="nav flex-column">
        @if (TreeRoot != null)
        {
            @foreach (var collection in TreeRoot.Collections)
            {
                <Tree CollectionAlias=@collection />
            }
        }
    </ul>
</div>

@functions {

    TreeRootUI? TreeRoot;

    [CascadingParameter(Name = "CustomLogin")]
    private RenderFragment? CustomLogin { get; set; }

    protected override void OnInit()
    {
        base.OnInit();

        UriHelper.OnLocationChanged += LocationChanged;
        
        TreeRoot = TreeService.GetRoot();
    }

    private async void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        //var uri = new Uri(e);

        //currentUrl = uri.AbsolutePath?.Substring(1);

        //if (!FindUrl(RootEntity.Collections, currentUrl))
        //{
        //    //await GetCollectionsAsync();
        //}

        StateHasChanged();
    }

    // TODO: find solution for this

    //private bool FindUrl(IEnumerable<CollectionTreeCollectionDTO> collections, string url)
    //{
    //    if (!(collections?.Any() ?? false))
    //    {
    //        return false;
    //    }
    //    else if (collections.Any(x => x.Path.Any(x => x.Path == url)))
    //    {
    //        return true;
    //    }
    //    else if (collections.Where(x => x.Nodes != null).SelectMany(x => x.Nodes).Any(x => x.Path == url))
    //    {
    //        return true;
    //    }
    //    else
    //    {
    //        return FindUrl(collections.Where(x => x.Nodes != null).SelectMany(x => x.Nodes.SelectMany(y => y.Collections)), url);
    //    }
    //}
}
