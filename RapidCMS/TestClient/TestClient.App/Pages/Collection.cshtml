@inherits BasePage

@page "/collection/{Action}/{CollectionAlias}"
@page "/collection/{Action}/{CollectionAlias}/{ParentId:int}"

@using RapidCMS.Common
@using RapidCMS.UI.Buttons
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService
@* TODO: merge both views into single one *@

<h1>Collection view of @CollectionAlias</h1>

@if (ListView == null && EditorView == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else if (ListView != null)
{
    <div class="top-row px-4">
        @foreach (var button in ListView.Buttons)
        {
            var context = new ButtonContext<BasePage>
            {
                ButtonId = button.ButtonId,
                CallbackAsync = ViewButtonCallbackAsync,
                Context = this,
                Icon = button.Icon,
                Label = button.Label
            };

            <CascadingValue Value="context">
                @if (!string.IsNullOrEmpty(button.Alias))
                {
                    @CustomButtons[button.Alias]
                }
                else
                {
                    <DefaultButton TContext="BasePage" />
                }
            </CascadingValue>
        }
    </div>

    @foreach (var pane in ListView.ViewPanes)
    {
        var hasButtons = pane.Buttons?.Any() ?? false;

        <div class="content px-4">
            <table class="table">
                <thead>
                    <tr>
                        @foreach (var header in pane.Properties)
                        {
                            <td>@header.Name<br /><small>@header.Description</small></td>
                        }
                        @if (hasButtons)
                        {
                            <td></td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var node in pane.Nodes)
                    {
                        <tr>
                            @foreach (var col in node.Values)
                            {
                                <td>@col.DisplayValue</td>
                            }
                            @if (hasButtons)
                            {
                                <td>
                                    @foreach (var button in pane.Buttons)
                                    {
                                        var context = new ButtonContext<NodeDTO>
                                        {
                                            ButtonId = button.ButtonId,
                                            CallbackAsync = NodeViewButtonCallbackAsync,
                                            Context = node,
                                            Icon = button.Icon,
                                            Label = button.Label
                                        };

                                        <CascadingValue Value="context">
                                            @if (!string.IsNullOrEmpty(button.Alias))
                                            {
                                                @CustomButtons[button.Alias]
                                            }
                                            else
                                            {
                                                <DefaultButton TContext="NodeDTO" />
                                            }
                                        </CascadingValue>
                                    }
                                </td>
                            }

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}
else if (EditorView != null)
{
    <div class="top-row px-4">
        @foreach (var button in EditorView.Buttons)
        {
            var context = new ButtonContext<BasePage>
            {
                ButtonId = button.ButtonId,
                CallbackAsync = EditorButtonCallbackAsync,
                Context = this,
                Icon = button.Icon,
                Label = button.Label
            };

            <CascadingValue Value="context">
                @if (!string.IsNullOrEmpty(button.Alias))
                {
                    @CustomButtons[button.Alias]
                }
                else
                {
                    <DefaultButton TContext="BasePage" />
                }
            </CascadingValue>
        }
    </div>

    var pane = EditorView.Editor;

    <div class="content px-4">
        <table class="table">
            <thead>
                <tr>
                    @foreach (var header in pane.Properties)
                    {
                        <td>@header.Name<br /><small>@header.Description</small></td>
                    }
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var node in pane.Nodes)
                {
                    <tr>
                        @foreach (var value in node.Values)
                        {
                            <td>
                                <DefaultEditor Type="@value.Type"
                                               Value="@value.Value"
                                               Callback="@((string newValue) => value.Value = newValue)"
                                               IsReadonly="@value.IsReadonly" />
                            </td>
                        }
                        <td>
                            @foreach (var button in node.Buttons)
                            {
                                var context = new ButtonContext<NodeDTO>
                                {
                                    ButtonId = button.ButtonId,
                                    CallbackAsync = NodeEditorButtonCallbackAsync,
                                    Context = node,
                                    Icon = button.Icon,
                                    Label = button.Label
                                };

                                <CascadingValue Value="context">
                                    @if (!string.IsNullOrEmpty(button.Alias))
                                    {
                                        @CustomButtons[button.Alias]
                                    }
                                    else
                                    {
                                        <DefaultButton TContext="NodeDTO" />
                                    }
                                </CascadingValue>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@functions {
    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private int? ParentId { get; set; } = null;

    [Parameter]
    private string CollectionAlias { get; set; }

    // TODO: these two parameters are a decoy for UpdateCommand...
    [Obsolete]
    [Parameter]
    private string VariantAlias { get; set; }

    [Obsolete]
    [Parameter]
    private int? Id { get; set; } = null;

    CollectionListViewDTO ListView;
    CollectionListEditorDTO EditorView;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        if (Action == Constants.List)
        {
            ListView = await CollectionService.GetCollectionListViewAsync(Action, CollectionAlias, ParentId);
            EditorView = null;
        }
        else
        {
            ListView = null;
            EditorView = await CollectionService.GetCollectionListEditorAsync(Action, CollectionAlias, ParentId);
        }

        StateHasChanged();
    }

    async Task ViewButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessListViewActionAsync(Action, CollectionAlias, ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    // TODO: add support for updating the editor view coming from command
    async Task EditorButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessListEditorActionAsync(Action, CollectionAlias, ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task NodeViewButtonCallbackAsync(string actionId, NodeDTO node)
    {
        var command = await CollectionService.ProcessListViewActionAsync(Action, CollectionAlias, node.Id, node.ParentId, actionId);

        await HandleViewCommandAsync(command);
    }

    async Task NodeEditorButtonCallbackAsync(string actionId, NodeDTO node)
    {
        var command = await CollectionService.ProcessListEditorActionAsync(Action, CollectionAlias, node.Id, node.ParentId, EditorView, actionId);

        await HandleViewCommandAsync(command);
    }
}
