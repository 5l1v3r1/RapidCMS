@inherits BasePage

@page "/node/{Action}/{Alias}"
@page "/node/{Action}/{Alias}/{Id:int}"
@page "/node/{Action}/{Alias}/{ParentId:int}/{Id:int}"
@page "/node/new/{Alias}"
@page "/node/new/{Alias}/{ParentId:int}"
@page "/node/new/{TypeGuidString}/{Alias}"
@page "/node/new/{TypeGuidString}/{Alias}/{ParentId:int}"

@using RapidCMS.Common
@using RapidCMS.UI.Buttons
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Services

@inject ICollectionService CollectionService
@*
    TODO: remove weird callback for binding
*@

<h1>@Action node @Alias @(ParentId.HasValue ? $":: {ParentId.Value}" : "") :: @Id</h1>

@if (Editor == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else
{
    <div class="top-row px-4">
        @{
            @foreach (var button in Editor.Buttons)
            {
                var context = new ButtonContext<BasePage>
                {
                    ButtonId = button.ButtonId,
                    CallbackAsync = ButtonCallbackAsync,
                    Context = this,
                    Icon = button.Icon,
                    Label = button.Label
                };

                <CascadingValue Value="context">
                    @if (!string.IsNullOrEmpty(button.Alias))
                    {
                        @CustomButtons[button.Alias]
                    }
                    else
                    {
                        <DefaultButton TContext="BasePage" />
                    }
                </CascadingValue>
            }
        }
    </div>

    @foreach (var pane in Editor.EditorPanes)
    {
        @if (pane.Fields.Any())
        {
            <div class="content px-4">
                <table class="table">
                    <thead>
                        <tr>
                            <td>Field</td>
                            <td>Editor</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var field in pane.Fields)
                        {
                            <tr>
                                <td>@field.label.Name<br /><small>@field.label.Description</small></td>
                                <td>
                                    @if (Action == Constants.View)
                                    {
                                        @field.value.DisplayValue
                                    }
                                    else
                                    {
                                        <DefaultEditor Type="@field.value.Type"
                                                       Value="@field.value.Value"
                                                       Callback="@((string value) => field.value.Value = value)"
                                                       IsReadonly="@field.value.IsReadonly" />
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @foreach (var subCollectionListEditor in pane.SubCollectionListEditors)
        {
            <Collection Action="@subCollectionListEditor.Action"
                        Alias="@subCollectionListEditor.CollectionAlias"
                        ParentId="@Id" />
        }
    }

}

@functions {
    [Parameter]
    private string Alias { get; set; }

    [Parameter]
    private string Action { get; set; }

    // TODO: should this Guid only be filled when there are multiple variants?
    [Parameter]
    private string TypeGuidString { get; set; }

    private Guid? TypeGuid => string.IsNullOrEmpty(TypeGuidString) ? default(Guid?) : Guid.TryParse(TypeGuidString, out var guid) ? guid : default(Guid?);

    [Parameter]
    private int? ParentId { get; set; } = null;

    [Parameter]
    private int? Id { get; set; } = null;

    NodeEditorDTO Editor;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        if (Action == null && TypeGuid.HasValue)
        {
            Action = Constants.New;
        }

        Editor = await CollectionService.GetNodeEditorAsync(Action, Alias, TypeGuid, ParentId, Id);
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessNodeEditorActionAsync(Action, Alias, ParentId, Id, Editor, actionId);

        await HandleViewCommandAsync(command);
    }
}
