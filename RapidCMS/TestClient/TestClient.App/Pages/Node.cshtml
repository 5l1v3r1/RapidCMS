@inherits BasePage

@page "/node/{Action}/{Alias}"
@page "/node/{Action}/{Alias}/{Id:int}"
@page "/node/{Action}/{Alias}/{ParentId:int}/{Id:int}"

@using RapidCMS.Common
@using RapidCMS.Common.Models.DTOs
@using RapidCMS.Common.Services
@using RapidCMS.Common.Extensions

@inject ICollectionService CollectionService
@*
    TODO: remove weird callback for binding
*@

<h1>@Action node @Alias @(ParentId.HasValue ? $":: {ParentId.Value}" : "") :: @Id</h1>

@if (Editor == null)
{
    <div class="content px-4">
        <div class="top-row px-4">

        </div>
        <div class="content px-4">
            <p>Loading..</p>
        </div>
    </div>
}
else
{
    <div class="top-row px-4">
        @foreach (var button in Editor.Buttons)
        {
            <DefaultButton Label="@button.Label" Icon="@button.Icon" ButtonId="@button.ButtonId" CallbackAsync="@ButtonCallbackAsync" Context="@this" />
        }
    </div>

    @foreach (var pane in Editor.EditorPanes)
    {
        <div class="content px-4">
            <table class="table">
                <thead>
                    <tr>
                        <td>Field</td>
                        <td>Editor</td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var field in pane.Fields)
                    {
                        <tr>
                            <td>@field.label.Name<br /><small>@field.label.Description</small></td>
                            <td>
                                @if (Action == Constants.View)
                                {
                                    @field.value.DisplayValue
                                }
                                else
                                {
                                    <DefaultEditor Type="@field.value.Type"
                                                   Value="@field.value.Value"
                                                   Callback="@((string value) => field.value.Value = value)" />
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@functions {
    [Parameter]
    private string Alias { get; set; }

    [Parameter]
    private string Action { get; set; }

    [Parameter]
    private int? ParentId { get; set; } = null;

    [Parameter]
    private int Id { get; set; }

    NodeEditorDTO Editor;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task LoadDataAsync()
    {
        Editor = await CollectionService.GetNodeEditorAsync(Action, Alias, ParentId, Id);
    }

    async Task ButtonCallbackAsync(string actionId, BasePage view)
    {
        var command = await CollectionService.ProcessNodeEditorActionAsync(Action, Alias, ParentId, Id, Editor, actionId);

        await HandleViewCommandAsync(command);
    }
}
