// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestLibrary.Data;

namespace TestLibrary.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestLibrary.Entities.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("PersonCountryId");

                    b.Property<int?>("PersonEntityId");

                    b.Property<int?>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonEntityId");

                    b.HasIndex("PersonCountryId", "PersonId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TestLibrary.Entities.PersonCountryEntity", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("PersonId");

                    b.Property<int?>("CountryEntityId");

                    b.Property<int?>("PersonEntityId");

                    b.HasKey("CountryId", "PersonId");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("PersonEntityId");

                    b.ToTable("PersonContries");
                });

            modelBuilder.Entity("TestLibrary.Entities.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryEntityId");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("CountryPersonId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("CountryId", "CountryPersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TestLibrary.Entities.CountryEntity", b =>
                {
                    b.HasOne("TestLibrary.Entities.PersonEntity", null)
                        .WithMany()
                        .HasForeignKey("PersonEntityId");

                    b.HasOne("TestLibrary.Entities.PersonCountryEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonCountryId", "PersonId");
                });

            modelBuilder.Entity("TestLibrary.Entities.PersonCountryEntity", b =>
                {
                    b.HasOne("TestLibrary.Entities.CountryEntity", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId");

                    b.HasOne("TestLibrary.Entities.PersonEntity", null)
                        .WithMany()
                        .HasForeignKey("PersonEntityId");
                });

            modelBuilder.Entity("TestLibrary.Entities.PersonEntity", b =>
                {
                    b.HasOne("TestLibrary.Entities.CountryEntity", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId");

                    b.HasOne("TestLibrary.Entities.PersonCountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId", "CountryPersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
