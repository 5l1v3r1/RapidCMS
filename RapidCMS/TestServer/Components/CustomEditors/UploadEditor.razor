@inherits BasePropertyEditor

@using Blazor.FileReader

<div class="input-group">
    <div class="input-group-prepend">
        <button type="button" class="btn" @onclick=@UploadAsync>
            <i class="oi oi-timer"></i> Upload file to blob
        </button>
    </div>
    <input type="file"
           @ref="FileUpload"
           @onchange=@ResetValidation
           class="form-control @(CssHelper.GetValidationClass(State))" />

    @if (waiting)
    {
        <div class="input-group-append">
            Uploading
        </div>
    }

    @foreach (var message in GetValidationMessages())
    {
        <div class="invalid-feedback">
            @message
        </div>
    }
</div>

@code {
    ElementReference FileUpload;

    [Inject] CloudStorageAccount Account { get; set; }
    [Inject] IFileReaderService FileReaderService { get; set; }

    private bool waiting = false;

    private async Task ResetValidation(ChangeEventArgs args)
    {
        EditContext.NotifyPropertyChanged(Property);
    }

    private async Task UploadAsync(MouseEventArgs args)
    {
        EditContext.NotifyPropertyBusy(Property);
        waiting = true;
        StateHasChanged();

        var blobClient = Account.CreateCloudBlobClient();
        var blobContainer = blobClient.GetContainerReference("blazor-uploads");
        await blobContainer.CreateIfNotExistsAsync();

        throw new Exception("ElementRef no worky worky");
        //var fileUploadRef = FileReaderService.CreateReference(FileUpload);

        //foreach (var file in await fileUploadRef.EnumerateFilesAsync())
        //{
        //    var fileInfo = await file.ReadFileInfoAsync();

        //    if (fileInfo.Size > 10 * 1024 * 1024)
        //    {
        //        EditContext.AddValidationMessage(Property, "File is too big. Max 10 MB");

        //        continue;
        //    }

        //    try
        //    {
        //        var blob = blobContainer.GetBlockBlobReference(Guid.NewGuid().ToString());

        //        var stream = await file.CreateMemoryStreamAsync(8192);

        //        await blob.UploadFromStreamAsync(stream);
        //    }
        //    catch (Exception ex)
        //    {
        //        EditContext.AddValidationMessage(Property, $"Failed to upload file: {ex.Message}");
        //    }
        //}

        //EditContext.NotifyPropertyFinished(Property);
        //waiting = false;
        //StateHasChanged();
    }
}
