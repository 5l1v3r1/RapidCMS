@inherits BasePropertyEditor

@using RapidCMS.UI.Components.Editors
@using RapidCMS.UI.Helpers
@using Microsoft.WindowsAzure.Storage
@using Microsoft.AspNetCore.Components
@using Blazor.FileReader

<div class="input-group">
    <div class="input-group-prepend">
        <button type="button" class="btn" onclick="@UploadAsync">
            <i class="oi oi-timer"></i> Upload file to blob
        </button>
    </div>
    <input value=@GetValue()
           type="file"
           ref="fileUpload"
           onchange=@(args => SetValue(args.Value))
           class="form-control @(CssHelper.GetValidationClass(State))" />

    @if (waiting)
    {
        <div class="input-group-append">
            Uploading
        </div>
    }

    @foreach (var message in GetValidationMessages())
    {
        <div class="invalid-feedback">
            @message
        </div>
    }
</div>

@functions {
    ElementRef fileUpload;

    [Inject] CloudStorageAccount Account { get; set; }
    [Inject] IFileReaderService FileReaderService { get; set; }

    private bool waiting = false;

    private async Task UploadAsync()
    {
        EditContext.NotifyPropertyBusy(Property);
        waiting = true;
        StateHasChanged();

        var blobClient = Account.CreateCloudBlobClient();
        var blobContainer = blobClient.GetContainerReference("blazor-uploads");
        await blobContainer.CreateIfNotExistsAsync();

        var fileUploadRef = FileReaderService.CreateReference(fileUpload);

        foreach (var file in await fileUploadRef.EnumerateFilesAsync())
        {
            var blob = blobContainer.GetBlockBlobReference(Guid.NewGuid().ToString());

            var stream = await file.OpenReadAsync();

            await blob.UploadFromStreamAsync(stream);
        }

        EditContext.NotifyPropertyFinished(Property);
        waiting = false;
        StateHasChanged();
    }
}
