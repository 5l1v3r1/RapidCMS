<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RapidCMS.Common</name>
    </assembly>
    <members>
        <member name="F:RapidCMS.Common.Authorization.Operations.Read">
            <summary>
            Read-only viewing of entity
            </summary>
        </member>
        <member name="F:RapidCMS.Common.Authorization.Operations.Create">
            <summary>
            Creating a new instance of entity
            </summary>
        </member>
        <member name="F:RapidCMS.Common.Authorization.Operations.Update">
            <summary>
            Modifying an existing instance of entity
            </summary>
        </member>
        <member name="F:RapidCMS.Common.Authorization.Operations.Delete">
            <summary>
            Deleting an existing instance of entity
            </summary>
        </member>
        <member name="F:RapidCMS.Common.Authorization.Operations.Add">
            <summary>
            Adding a relation to an existing entity
            </summary>
        </member>
        <member name="F:RapidCMS.Common.Authorization.Operations.Remove">
            <summary>
            Removing an existing relation to an existing entity
            </summary>
        </member>
        <member name="M:RapidCMS.Common.Data.DataViewBuilder`1.GetDataViewsAsync">
            <summary>
            This method is called when the list view / editor want to get all data views for the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Data.IDataCollection.SetEntityAsync(RapidCMS.Common.Data.IEntity)">
            <summary>
            Use this method to receive the Entity for which this data collection is used. This allows for making the available elements contextual to the entity.
            </summary>
            <param name="entity">Entity for which this data collection is used.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Data.IDataCollection.GetAvailableElementsAsync">
            <summary>
            This method is called when the editor which this data collection requests elements to display.
            </summary>
            <returns></returns>
        </member>
        <member name="E:RapidCMS.Common.Data.IDataCollection.OnDataChange">
            <summary>
            The editor using this data colleciton will refresh its UI when this event is invoked. Use this to refresh the UI when the available elements changes.
            </summary>
        </member>
        <member name="P:RapidCMS.Common.Data.IQuery`1.DataViewExpression">
            <summary>
            Expression corresponding to the selected data view. Can be directly inserted into IQueryable.Where.
            </summary>
        </member>
        <member name="M:RapidCMS.Common.Data.IRepository.InternalNewAsync(System.String,System.Type)">
            <summary>
            Create a new entity in-memory.
            </summary>
            <param name="parentId"></param>
            <param name="variantType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Helpers.PropertyMetadataHelper.GetPropertyMetadata(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a given LambdaExpression containing MemberExpressions to getters and setters, and the name of each nested object plus the name of the property.
            
            (Person x) => x.Company.Owner.Name becomes:
            getter: (object x) => (object)(((Person) x).get_Company().get_Owner().get_Name())
            setter: (object x, object y) => ((Person) x).get_Company().get_Owner().set_Name((string)y)
            objectType: Person
            propertyType: string
            name: CompanyOwnerName
            </summary>
            <param name="lambdaExpression">The LambdaExpression to be converted</param>
            <returns>GetterAndSetter object when successful, null when not.</returns>
        </member>
        <member name="M:RapidCMS.Common.Helpers.PropertyMetadataHelper.GetExpressionMetadata(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a given LambdaExpression containing expression to get value from an object.
            
            (Person x) => $"{x.FirstName} - {x.LastName}"  becomes:
            getter: (object x) => (object)
            objectType: Person
            propertyType: string
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when given LambdaExpression cannot be converted to a getter.</exception>
            <param name="lambdaExpression">The LambdaExpression to be converted</param>
            <returns>GetterAndSetter object when successful, null when not.</returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.AddDashboardSection(System.String,System.Boolean)">
            <summary>
            Adds a section to the list of components to draw on the dashboard, the homepage of the CMS.
            Use the edit flag to indicate whether this should be the editor or the view variant of the collection.
            </summary>
            <param name="collectionAlias">Alias of a collection</param>
            <param name="edit">Set to true to use the ListEditor, otherwise the ListView is used</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.AddDashboardSection(System.Type)">
            <summary>
            Adds a razor component to the list of components to draw on the dashboard, the homepage of the CMS. 
            </summary>
            <param name="customDashboardSectionType">Type of the razor component to draw.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.AllowAnonymousUser">
            <summary>
            Use this to allow anonymous users to fully use your CMS. This adds a very permissive AuthorizationHandler that allows everything by anyone. 
            
            Do not use in production.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.SetCustomLoginScreen(System.Type)">
            <summary>
            Draws the given razor component as login screen.
            </summary>
            <param name="loginType">Type of razor component.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.SetCustomLoginStatus(System.Type)">
            <summary>
            Draws the given razor component in the top bar of the CMS. Use this to display the status of the currently signed in user, and the possibility to sign out.
            </summary>
            <param name="loginType">Type of razor component.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICmsConfig.SetSiteName(System.String)">
            <summary>
            Sets the name of title in the top left bar of the CMS. Defaults to RapidCMS.
            </summary>
            <param name="siteName">Name of your CMS</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.AddDataView(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a data view to the collection. Data views are displayed as seperate tabs on the collection, and allow
            the user to filter the collection data easily.
            </summary>
            <param name="label">Human readable label of this data view</param>
            <param name="queryExpression">Query defining this data view</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.AddEntityVariant``1(System.String,System.String)">
            <summary>
            Adds an entity variant to the collection. Entity variants are derivatives of TEntity.
            </summary>
            <typeparam name="TDerivedEntity"></typeparam>
            <param name="name">Human readable name of this variant</param>
            <param name="icon">Name of ion icon.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetDataViewBuilder``1">
            <summary>
            Adds a data view builder to the collection. Data view builders allow for creating dynamic data views.
            </summary>
            <typeparam name="TDataViewBuilder"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetListEditor(System.Action{RapidCMS.Common.Models.Config.IListEditorConfig{`0}})">
            <summary>
            Sets the ListEditor of this collection
            </summary>
            <param name="configure">Action used to configure the ListEditor</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetListEditor(RapidCMS.Common.Enums.ListType,System.Action{RapidCMS.Common.Models.Config.IListEditorConfig{`0}})">
            <summary>
            Sets the ListEditor of this collection
            </summary>
            <param name="listEditorType">Controls how the ListEditor is displayed</param>
            <param name="configure">Action used to configure the ListEditor</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetListEditor(RapidCMS.Common.Enums.ListType,RapidCMS.Common.Enums.EmptyVariantColumnVisibility,System.Action{RapidCMS.Common.Models.Config.IListEditorConfig{`0}})">
            <summary>
            Sets the ListEditor of this collection
            </summary>
            <param name="listEditorType">Controls how the ListEditor is displayed</param>
            <param name="emptyVariantColumnVisibility">Controls whether empty columns in the table should be collapsed. Only required when the
            collection uses multiple EntityVariants, with seperate sets of properties which are not shared between the variants. Collapsing
            the empty cell will reduce the number of columns required, and makes the table more readable.</param>
            <param name="configure">Action used to configure the ListEditor</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetListView(System.Action{RapidCMS.Common.Models.Config.IListViewConfig{`0}})">
            <summary>
            Sets the ListView of this collection
            </summary>
            <param name="configure">Action used to configure the ListView</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetNodeEditor(System.Action{RapidCMS.Common.Models.Config.INodeEditorConfig{`0}})">
            <summary>
            Sets the NodeEditor of this collection
            </summary>
            <param name="configure">Action used to configure the NodeEditor</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetNodeView(System.Action{RapidCMS.Common.Models.Config.INodeViewConfig{`0}})">
            <summary>
            Sets the NodeView of this collection
            </summary>
            <param name="configure">Action used to configure the NodeView</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetRepository``1">
            <summary>
            Sets the given class as repository of this collection.
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetTreeView(RapidCMS.Common.Enums.EntityVisibilty,System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets how the collection should be displayed in the tree.
            </summary>
            <param name="entityVisibility">Controls whether the entities of this collection are visible in the tree</param>
            <param name="entityNameExpression">Expression used to display entities of this collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetTreeView(RapidCMS.Common.Enums.EntityVisibilty,RapidCMS.Common.Enums.CollectionRootVisibility,System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets how the collection should be displayed in the tree.
            </summary>
            <param name="entityVisibility">Controls whether the entities of this collection are visible in the tree</param>
            <param name="rootVisibility">Controls whether the root of this collection is visible in the tree</param>
            <param name="entityNameExpression">Expression used to display entities of this collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig`1.SetTreeView(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets how the collection should be displayed in the tree.
            </summary>
            <param name="entityNameExpression">Expression used to display entities of this collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionRelationConfig`2.SetElementDisplayProperties(System.Linq.Expressions.Expression{System.Func{`1,System.String}}[])">
            <summary>
            Sets the expression(s) that will be used as display label(s) for the relation.
            </summary>
            <param name="propertyExpressions">Expression(s) indicating how an entity should be displayed in the input / list</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionRelationConfig`2.SetElementIdProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Sets the property that will be used as id for the relation.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="propertyExpression">Expression selecting the id-property</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionRelationConfig`2.SetRepositoryParentIdProperty(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets the property that will be used as parentId for the related collection.
            </summary>
            <param name="propertyExpression">Expression selectiong the parentId</param>
            <returns></returns>
        </member>
        <member name="P:RapidCMS.Common.Models.Config.ICollectionConfig.Collections">
            <summary>
            Collections known to this node in the collection tree.
            </summary>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.ICollectionConfig.IsUnique(System.String)">
            <summary>
            Verifies if the given alias is unique.
            </summary>
            <param name="alias">Alias of a collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayFieldConfig`2.SetName(System.String)">
            <summary>
            Sets the name of this field, used in table and list views.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayFieldConfig`2.SetDescription(System.String)">
            <summary>
            Sets the description of this field, displayed under the name.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayFieldConfig`2.VisibleWhen(System.Func{`0,RapidCMS.Common.Enums.EntityState,System.Boolean})">
            <summary>
            Sets an expression which determines whether this field should be visible.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayPaneConfig`1.AddField(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Action{RapidCMS.Common.Models.Config.IDisplayFieldConfig{`0,System.String}})">
            <summary>
            Adds a field to the pane.
            </summary>
            <param name="displayExpression">Expression to display this field</param>
            <param name="configure">Action to configure this field</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayPaneConfig`1.AddSubCollectionList``1(System.String,System.Action{RapidCMS.Common.Models.Config.ISubCollectionListConfig{``0}})">
            <summary>
            Adds a sub collection to the pane. A sub collection is defined seperately, and only referenced by alias.
            </summary>
            <typeparam name="TSubEntity">Type of the sub collections entity</typeparam>
            <param name="collectionAlias">Alias of the sub collection</param>
            <param name="configure">Action to configure the use of this sub collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayPaneConfig`1.AddRelatedCollectionList``1(System.String,System.Action{RapidCMS.Common.Models.Config.IRelatedCollectionListConfig{`0,``0}})">
            <summary>
            Adds a collection to the pane which is used to view the many-to-many relation between the collection of this pane, and the related collection.
            The related collection can by any collection.
            </summary>
            <typeparam name="TRelatedEntity">Type of the related collections entity</typeparam>
            <param name="collectionAlias">Alias of the related collection</param>
            <param name="configure">Action to configure the use of this related collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayPaneConfig`1.SetLabel(System.String)">
            <summary>
            Adds a label at the top of this pane.
            </summary>
            <param name="label">Text to display in the label</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IDisplayPaneConfig`1.VisibleWhen(System.Func{`0,RapidCMS.Common.Enums.EntityState,System.Boolean})">
            <summary>
            Expression which determines whether this pane should be visible.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetName(System.String)">
            <summary>
            Sets the name of this field, used in table and list views.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetDescription(System.String)">
            <summary>
            Sets the description of this field, displayed under the name.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetType(RapidCMS.Common.Enums.EditorType)">
            <summary>
            Sets the type of build-in editor used for this field.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetType(System.Type)">
            <summary>
            Sets the type of custom razor component used for this field.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetReadonly(System.Boolean)">
            <summary>
            Disables the editor of this field when set to true.
            </summary>
            <param name="readonly"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetDataCollection``1">
            <summary>
            Binds a DataCollection to this field. This data collection is used by dropdowns and selects to display options.
            </summary>
            <typeparam name="TDataCollection"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetCollectionRelation``1(System.String,System.Action{RapidCMS.Common.Models.Config.ICollectionRelationConfig{`0,``0}})">
            <summary>
            Binds a Collection to this field. This collection is used by dropdowns and selects to display options.
            </summary>
            <typeparam name="TRelatedEntity">Entity of the bound collection.</typeparam>
            <param name="collectionAlias">Alias of the collection to bind.</param>
            <param name="configure">Action to configure relation.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.SetCollectionRelation``2(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.String,System.Action{RapidCMS.Common.Models.Config.ICollectionRelationConfig{`0,``0}})">
            <summary>
            Binds a Collection to this field. This collection is used by dropdowns and selects to display options.
            
            Use this overload to bind a collection for a many-to-many relation in EF Core backed repositories:
            - Use the joining table as property for this editor.
            - Use the relatedElements expression as selector for selected elements to display in the EditorType.MultiSelect or any other RelationAttribute(RelationType.Many) editor.
            </summary>
            <typeparam name="TRelatedEntity">Entity of the bound collection.</typeparam>
            <typeparam name="TKey">Type of the foreign key</typeparam>
            <param name="relatedElements">Expression for selected entities.</param>
            <param name="collectionAlias">Alias of the collection to bind.</param>
            <param name="configure">Action to configure relation.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.VisibleWhen(System.Func{`0,RapidCMS.Common.Enums.EntityState,System.Boolean})">
            <summary>
            Sets an expression which determines whether this field should be visible.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorFieldConfig`2.DisableWhen(System.Func{`0,RapidCMS.Common.Enums.EntityState,System.Boolean})">
            <summary>
            Sets an expression which determine whether this field should be disabled.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorPaneConfig`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{RapidCMS.Common.Models.Config.IEditorFieldConfig{`0,``0}})">
            <summary>
            Adds a field to the pane.
            </summary>
            <param name="displayExpression">Expression to edit this field</param>
            <param name="configure">Action to configure this field</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorPaneConfig`1.AddSubCollectionList``1(System.String,System.Action{RapidCMS.Common.Models.Config.ISubCollectionListConfig{``0}})">
            <summary>
            Adds a sub collection to the pane. This sub collection should be a sub collection of the collection to which this pane belongs.
            </summary>
            <typeparam name="TSubEntity">Type of the sub collections entity</typeparam>
            <param name="collectionAlias">Alias of the sub collection</param>
            <param name="configure">Action to configure the use of this sub collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorPaneConfig`1.AddRelatedCollectionList``1(System.String,System.Action{RapidCMS.Common.Models.Config.IRelatedCollectionListConfig{`0,``0}})">
            <summary>
            Adds a collection to the pane which is used to edit the many-to-many relation between the collection of this pane, and the related collection.
            The related collection can by any collection.
            </summary>
            <typeparam name="TRelatedEntity">Type of the related collections entity</typeparam>
            <param name="collectionAlias">Alias of the related collection</param>
            <param name="configure">Action to configure the use of this related collection</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorPaneConfig`1.SetLabel(System.String)">
            <summary>
            Adds a label at the top of this pane.
            </summary>
            <param name="label">Text to display in the label</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IEditorPaneConfig`1.VisibleWhen(System.Func{`0,RapidCMS.Common.Enums.EntityState,System.Boolean})">
            <summary>
            Expression which determines whether this pane should be visible.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasButtons`1.AddDefaultButton(RapidCMS.Common.Enums.DefaultButtonType,System.String,System.String,System.Boolean)">
            <summary>
            Adds a default button. A default button is a simple button with a fixed CrudType.
            </summary>
            <param name="type">Type of button to add</param>
            <param name="label">Text to display on the button</param>
            <param name="icon">Name of ion icon to use</param>
            <param name="isPrimary">Set to true to make this button to stand out</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasButtons`1.AddCustomButton``1(System.Type,System.String,System.String)">
            <summary>
            Adds a custom button. A custom button is a razor component derived from BaseButton, and has a IButtonActionHandler that is invoked when the button is clicked.
            </summary>
            <typeparam name="TActionHandler">Type of the button action handler</typeparam>
            <param name="buttonType">Type of the razor component</param>
            <param name="label">Text to display on the button</param>
            <param name="icon">Name of ion icon to use</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasButtons`1.AddPaneButton(System.Type,System.String,System.String,System.Nullable{RapidCMS.Common.Enums.CrudType})">
            <summary>
            Adds a pane button. A pane button is a default button that opens a modal which displays the given razor component in it. The razor component must be drived from BaseSideBar. 
            </summary>
            <param name="paneType">Type of the razor component</param>
            <param name="label">Text to display on the button</param>
            <param name="icon">Name of ion icon to use</param>
            <param name="defaultCrudType">Default that is provided to the BaseSideBar derived component, to use when invoking ButtonClicked.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayPanes`2.AddSection(System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{`0}})">
            <summary>
            Adds a section to the current view.
            </summary>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayPanes`2.AddSection(System.Type,System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{`0}})">
            <summary>
            Adds a section to the current view.
            </summary>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayPanes`2.AddSection``1(System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{``0}})">
            <summary>
            Adds a section to the current view, tailored for the specific TDerivedEntity EntityVariant. Only entities of that type will use this section.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayPanes`2.AddSection``1(System.Type,System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{``0}})">
            <summary>
            Adds a section to the current view, tailored for the specific TDerivedEntity. Only entities of that type will use this section.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayTable`2.AddRow(System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{`0}})">
            <summary>
            Adds a row to the current table.
            </summary>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayTable`2.AddRow(System.Type,System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{`0}})">
            <summary>
            Adds a row to the current table.
            </summary>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayTable`2.AddRow``1(System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{``0}})">
            <summary>
            Adds a row to the current table, tailored for the specific TDerivedEntity EntityVariant. Only entities of that type will use this row.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasDisplayTable`2.AddRow``1(System.Type,System.Action{RapidCMS.Common.Models.Config.IDisplayPaneConfig{``0}})">
            <summary>
            Adds a row to the current table, tailored for the specific TDerivedEntity. Only entities of that type will use this section.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasEditorPanes`2.AddSection(System.Action{RapidCMS.Common.Models.Config.IEditorPaneConfig{`0}})">
            <summary>
            Adds a section to the current editor.
            
            In a ListEditor, a section is a seperate block.
            In a TableEditor, a section is a row.
            </summary>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasEditorPanes`2.AddSection(System.Type,System.Action{RapidCMS.Common.Models.Config.IEditorPaneConfig{`0}})">
            <summary>
            Adds a section to the current editor.
            
            In a ListEditor, a section is a seperate block.
            In a TableEditor, a section is a row.
            </summary>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasEditorPanes`2.AddSection``1(System.Action{RapidCMS.Common.Models.Config.IEditorPaneConfig{``0}})">
            <summary>
            Adds a section to the current editor, tailored for the specific TDerivedEntity EntityVariant. Only entities of that type will use this section.
            
            In a ListEditor, a section is a seperate block.
            In a TableEditor, a section is a row.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasEditorPanes`2.AddSection``1(System.Type,System.Action{RapidCMS.Common.Models.Config.IEditorPaneConfig{``0}})">
            <summary>
            Adds a section to the current editor, tailored for the specific TDerivedEntity. Only entities of that type will use this section.
            
            In a ListEditor, a section is a seperate block.
            In a TableEditor, a section is a row.
            </summary>
            <typeparam name="TDerivedEntity">Type of the EntityVariant.</typeparam>
            <param name="customSectionType">Custom razor component that will be used to render this section. Must be derived from BaseSection.</param>
            <param name="configure">Action to configure the section.</param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasPageSize`1.SetPageSize(System.Int32)">
            <summary>
            Sets the pagesize of the ListEditor. 
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:RapidCMS.Common.Models.Config.IHasSearchBar`1.SetSearchBarVisibility(System.Boolean)">
            <summary>
            Sets the visibility of the search bar atop of the ListEditor.
            </summary>
            <param name="visible"></param>
            <returns></returns>
        </member>
    </members>
</doc>
