@inherits BasePage

@layout MainLayout

@page "/{Action}/{CollectionAlias}/entity/{VariantAlias}"
@page "/{Action}/{CollectionAlias}/entity/{VariantAlias}/{Id}"
@page "/{Action}/{Path}/{CollectionAlias}/entity/{VariantAlias}"
@page "/{Action}/{Path}/{CollectionAlias}/entity/{VariantAlias}/{Id}"

@if (EditContext == null)
{
    <div class="content">
        <p>Loading..</p>
    </div>
}
else
{
    <CascadingEditContext EditContext=@EditContext>
        <ButtonBar Buttons="Buttons" OnButtonClick="ButtonOnClickAsync" />

        @if (Sections != null)
        {
            @foreach (var section in Sections)
            {
                var renderFragment = section.ToRenderFragment();

                if (renderFragment != null)
                {
                    @renderFragment
                }
                else
                {
                    <BlockSection Section="section" OnButtonClick="ButtonOnClickAsync" />
                }
            }
        }
    </CascadingEditContext>
}

@code {
    [Inject] private IEditContextService EditContextService { get; set; }
    [Inject] private IEditorService EditorService { get; set; }

    EditContext? EditContext;
    IEnumerable<ButtonUI>? Buttons;
    IEnumerable<SectionUI>? Sections;

    protected override async Task LoadDataAsync(IEnumerable<string>? reloadEntityIds = null)
    {
        try
        {
            var editContext = await EditContextService.GetEntityAsync(GetUsageType(), CollectionAlias, VariantAlias, GetParentPath(), Id);
            var resolver = await EditorService.GetNodeUIResolverAsync(GetUsageType(), CollectionAlias);

            Buttons = await resolver.GetButtonsForEditContextAsync(editContext);
            Sections = await resolver.GetSectionsForEditContextAsync(editContext);

            EditContext = editContext;

            EditContext.OnFieldChanged += (s, a) => StateHasChanged();

            StateHasChanged();
        }
        catch
        {
            EditContext = null;

            throw;
        }
    }

    async void ButtonOnClickAsync(object? sender, ButtonClickEventArgs args)
    {
        var model = sender as ButtonViewModel;

        try
        {
            if (model == null)
            {
                throw new ArgumentException($"Argument must be of type {typeof(ButtonViewModel)}.", nameof(sender));
            }

            var command = await EditContextService.ProcessEntityActionAsync(GetUsageType(), CollectionAlias, GetParentPath(), Id, args.EditContext, model.ButtonId, args.Data);

            await HandleViewCommandAsync(command);
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }
}
