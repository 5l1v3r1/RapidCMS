@inherits BaseEditContextSection

@if (Section != null && Section.IsVisible(EditContext.Entity, EditContext.EntityState))
{
    var renderFragment = Section.ToRenderFragment();

    if (renderFragment != null)
    {
        @renderFragment
    }
    else
    {
        var index = 0;

        @if (Section.Elements != null)
        {
            <tr draggable="true" 
                @ondragstart="async (args) => await DragStart(args, EditContext.Entity.Id!)" 
                @ondragenter="async (args) => await DragEnter(args, EditContext.Entity.Id!)" 
                @ondragend="DragEnd">
                @{
                    foreach (var element in Section.Elements)
                    {
                        if (element is FieldUI field)
                        {
                            var name = (field as ExpressionFieldUI)?.Expression.PropertyName ?? (field as PropertyFieldUI)?.Property.PropertyName;
                            if (name == null)
                            {
                                continue;
                            }

                            if (!CollapseEmptyCells)
                            {
                                var position = UI.UniqueFields?.FindIndex(x => x.Name == field.Name) ?? UI.MaxUniqueFieldsInSingleEntity;

                                // fill in the gaps (when dealing with multiple entity variants)
                                if (position > index)
                                {
                                    <td colspan=@(position - index)>&nbsp;</td>

                                    index = position;
                                }
                            }

                            index++;

                            <td>
                                @if (field.IsVisible(EditContext.Entity, EditContext.EntityState))
                                {
                                    @field.ToRenderFragment(EditContext)
                                }
                            </td>
                        }
                    }
                    // fill in the gaps (when dealing with multiple entity variants)
                    if (!CollapseEmptyCells && UI.UniqueFields?.Count > index)
                    {
                        <td colspan=@(UI.UniqueFields.Count - index)>&nbsp;</td>
                    }
                    else if (UI.MaxUniqueFieldsInSingleEntity > index)
                    {
                        <td colspan=@(UI.MaxUniqueFieldsInSingleEntity - index)>&nbsp;</td>
                    }
                    if (UI.SectionsHaveButtons)
                    {
                        <ButtonCell Buttons="Section.Buttons" OnButtonClick="OnButtonClick" />
                    }
                }
            </tr>
        }
    }
}

@code {
    private bool CollapseEmptyCells => UI.EmptyVariantColumnVisibility == EmptyVariantColumnVisibility.Collapse;

    [Parameter] public ListUI UI { get; set; }
    [Parameter] public EventCallback<ButtonClickEventArgs> OnButtonClick { get; set; }
    [Inject] private IJSRuntime runtime { get; set; }

    static string? DraggedId { get; set; }
    static string? DroppedId { get; set; }

    private async Task DragStart(DragEventArgs args, string id)
    {
        DraggedId = id;

        await runtime.InvokeVoidAsync("console.log", $"{id} started");
    }

    private async Task DragEnter(DragEventArgs args, string id)
    {
        DroppedId = id;

        await runtime.InvokeVoidAsync("console.log", $"Over {id}");
    }

    private async Task DragEnd(DragEventArgs args)
    {
        await runtime.InvokeVoidAsync("console.log", $"{DraggedId} dropped on {DroppedId}");
    }
}