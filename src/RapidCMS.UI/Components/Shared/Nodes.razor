@inherits NodesBase

@if (UI != null && NodesVisible != null)
{
    <ul class="nav flex-column">
        @foreach (var node in UI)
        {
            <li class="nav-item">
                @if (!node.RootVisibleOfCollections)
                {
                    <button @onclick="@((MouseEventArgs e) => NodesVisible[node.Id] = !NodesVisible[node.Id])" class="toggle">
                        @if (NodesVisible[node.Id])
                        {
                            <i class="icon ion-md-arrow-dropdown"></i>
                        }
                        else
                        {
                            <i class="icon ion-md-arrow-dropright"></i>
                        }
                    </button>
                }
                else
                {
                    <button class="toggle" disabled>
                        <i class="icon"></i>
                    </button>
                }

                @if (node.Path != null)
                {
                    <NavLink href=@node.Path Match="NavLinkMatch.All">@node.Name</NavLink>
                }
                else
                {
                    <a href="/unauthorized" class="disabled">@node.Name</a>
                }

                <ul class="nav flex-column">
                    @if (NodesVisible[node.Id])
                    {
                        @foreach (var subCollection in node.Collections)
                        {
                            <Tree CollectionAlias=@subCollection ParentPath=@(ParentPath.AddLevel(ParentPath, CollectionAlias, node.Id)) />
                        }
                    }
                </ul>
            </li>
        }
    </ul>
}
else if (!string.IsNullOrWhiteSpace(error))
{
    <ul class="nav flex-column">
        <li>@error</li>
    </ul>
}

@code {

    Dictionary<string, bool>? NodesVisible;
    List<TreeNodeUI>? UI;
    string? error;

    protected override async Task OnParametersSetAsync()
    {
        await OnNodesUpdateAsync();
    }

    protected override async Task OnNodesUpdateAsync()
    {
        var oldNodesVisible = NodesVisible;

        try
        {
            UI = await TreeService.GetNodesAsync(CollectionAlias, ParentPath);
            NodesVisible = UI.ToDictionary(x => x.Id, x => x.RootVisibleOfCollections);

            // restore the view state with the new nodes
            if (oldNodesVisible != null)
            {
                foreach (var node in oldNodesVisible.Where(x => x.Value))
                {
                    if (NodesVisible.ContainsKey(node.Key))
                    {
                        NodesVisible[node.Key] = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        StateHasChanged();
    }
}
