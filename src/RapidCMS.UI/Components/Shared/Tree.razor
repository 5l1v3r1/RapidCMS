@inject ITreeService TreeService

@if (UI == null)
{
    <li>Loading tree..</li>
}
else if (UI.RootVisible)
{
    <li class="nav-item">
        @if (UI.EntitiesVisible)
        {
            <button @onclick="@((MouseEventArgs e) => NodesVisible = !NodesVisible)" class="toggle">
                @if (NodesVisible)
                {
                    <i class="icon ion-md-arrow-dropdown"></i>
                }
                else
                {
                    <i class="icon ion-md-arrow-dropright"></i>
                }
            </button>
        }
        else
        {
            <button class="toggle" disabled>
                <i class="icon"></i>
            </button>
        }

        @if (UI.Path != null)
        {
            <NavLink href=@UI.Path><i class="icon ion-md-@UI.Icon"></i> @UI.Name</NavLink>
        }
        else
        {
            <a href="/unauthorized" class="disabled"><i class="icon ion-md-lock"></i> @UI.Name</a>
        }

        @if (NodesVisible)
        {
            <Nodes CollectionAlias=@CollectionAlias ParentId=@ParentId />
        }
    </li>
}
else
{
    <Nodes CollectionAlias=@CollectionAlias ParentId=@ParentId />
}

@code {

    bool NodesVisible = false;

    TreeUI? UI;

    protected override async Task OnParametersSetAsync()
    {
        UI = await TreeService.GetTreeAsync(CollectionAlias, ParentId);
    }

    [Parameter] public string CollectionAlias { get; set; }

    [Parameter] public string? ParentId { get; set; } = null;
}
